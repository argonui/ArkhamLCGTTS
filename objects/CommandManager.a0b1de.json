{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 0,
    "g": 0,
    "r": 0
  },
  "Description": "",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "a0b1de",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": true,
  "LuaScript": "---\r\n--- Generated by EmmyLua(https://github.com/EmmyLua)\r\n--- Created by Whimsical.\r\n--- DateTime: 2021-08-22 6:36 a.m.\r\n---\r\n\r\n---@class CommandTableEntry\r\n---@field public object TTSObject\r\n---@field public runOn ArkhamImport_Command_RunDirectives\r\nlocal CommandTableEntry = {}\r\n\r\n---@type table\u003cstring, CommandTableEntry\u003e\r\nlocal commands = {}\r\n\r\n---@type table\u003cstring, boolean\u003e\r\nlocal found_commands = {}\r\n\r\n---@type table\u003cstring, any\u003e\r\nlocal command_state\r\n\r\nlocal function load_commands()\r\n    local command_objects = getObjectsWithTag(\"import_command\")\r\n\r\n    for _, object in ipairs(command_objects) do\r\n        commands[object:getVar(\"command_name\")] = {\r\n            object = object,\r\n            runOn = object:getTable(\"runOn\")\r\n        }\r\n    end\r\nend\r\n\r\n---@param configuration ArkhamImportConfiguration\r\n---@param message string\r\n---@return ArkhamImport_CommandManager_InitializationResults\r\nlocal function build_error(configuration, message)\r\n    return {\r\n        configuration = configuration,\r\n        is_successful = false,\r\n        error_message = message\r\n    }\r\nend\r\n\r\n---@param source table\u003cany, any\u003e\r\n---@param updates table\u003cany, any\u003e\r\nlocal function merge_tables(source, updates)\r\n    for key, _ in pairs(source) do\r\n        local update = updates[key]\r\n        if update~=nil then\r\n            source[key] = update\r\n        end\r\n    end\r\nend\r\n\r\n---@param instruction TTSObject\r\n---@param initialization_state any\r\n---@param arguments string[]\r\n---@return ArkhamImport_CommandManager_InitializationResults|nil\r\nlocal function run_instruction(instruction, initialization_state, arguments)\r\n    ---@type ArkhamImport_Command_DescriptionInstructionResults\r\n    local result = instruction:call(\"do_instruction\", {\r\n        configuration = initialization_state.configuration,\r\n        command_state = initialization_state.command_state,\r\n        arguments = arguments\r\n    })\r\n\r\n    if (not result) or type(result)~=\"table\" then\r\n        return build_error(initialization_state.configuration, table.concat({\"Command \\\"\", instruction:getName(), \"\\\" did not return a table from do_instruction call. Type \\\"\", type(result), \"\\\" was returned.\"}))\r\n    end\r\n\r\n    if not result.is_successful then\r\n        return build_error(result.configuration, result.error_message)\r\n    end\r\n\r\n    merge_tables(initialization_state, result)\r\nend\r\n\r\n---@param description string\r\n---@param initialization_state table\u003cstring, any\u003e\r\n---@return ArkhamImport_CommandManager_InitializationResults|nil\r\nlocal function initialize_instructions(description, initialization_state)\r\n    for _, instruction in ipairs(parse(description)) do\r\n        local command = commands[instruction.command]\r\n\r\n        if command==nil then\r\n            return build_error(initialization_state.configuration, table.concat({ \"Could not find command \\\"\", command, \"\\\".\"}))\r\n        end\r\n\r\n        found_commands[instruction.command] = true\r\n\r\n        if command.runOn.instructions then\r\n            local error = run_instruction(command.object, initialization_state, instruction.arguments)\r\n            if error then return error end\r\n        end\r\n    end\r\nend\r\n\r\n---@param parameters ArkhamImport_CommandManager_InitializationArguments\r\n---@return table\u003cstring, any\u003e\r\nlocal function create_initialize_state(parameters)\r\n    return {\r\n        configuration = parameters.configuration,\r\n        command_state = {}\r\n    }\r\nend\r\n\r\n---@param parameters ArkhamImport_CommandManager_InitializationArguments\r\n---@return ArkhamImport_CommandManager_InitializationResults\r\nfunction initialize(parameters)\r\n    found_commands = {}\r\n    load_commands()\r\n\r\n    local initialization_state = create_initialize_state(parameters)\r\n\r\n    local error = initialize_instructions(parameters.description, initialization_state)\r\n    if error then return error end\r\n\r\n    command_state = initialization_state.command_state\r\n\r\n    return {\r\n        configuration = initialization_state.configuration,\r\n        is_successful = true\r\n    }\r\nend\r\n\r\n---@param parameters ArkhamImport_CommandManager_HandlerArguments\r\n---@return table\u003cstring, any\u003e\r\nlocal function create_handler_state(parameters)\r\n    return {\r\n        card = parameters.card,\r\n        handled = false,\r\n        zone = parameters.zone,\r\n        command_state = command_state\r\n    },\r\n    {\r\n        configuration = parameters.configuration,\r\n        source_guid = parameters.source_guid\r\n    }\r\nend\r\n\r\n---@param card ArkhamImportCard\r\n---@param zone = string[]\r\n---@param handled boolean\r\n---@param error_message string\r\n---@return ArkhamImport_CommandManager_HandlerResults\r\nlocal function create_handler_error(card, zone, handled, error_message)\r\n    return {\r\n        handled = handled,\r\n        card = card,\r\n        zone = zone,\r\n        is_successful = false,\r\n        error_message = error_message\r\n    }\r\nend\r\n\r\n---@param handler TTSObject\r\n---@param handler_state table\u003cstring, any\u003e\r\n---@param handler_constants table\u003cstring, any\u003e\r\n---@return ArkhamImport_CommandManager_HandlerResults|nil\r\nlocal function call_handler(handler, handler_state, handler_constants)\r\n    ---@type ArkhamImport_CommandManager_HandlerResults\r\n    local results = handler:call(\"handle_card\", {\r\n        configuration = handler_constants.configuration,\r\n        source_guid = handler_constants.source_guid,\r\n        card = handler_state.card,\r\n        zone = handler_state.zone,\r\n        command_state = handler_state.command_state,\r\n    })\r\n\r\n    if not results.is_successful then return create_handler_error(results.card, results.zone, results.handled, results.error_message) end\r\n\r\n    merge_tables(handler_state, results)\r\n    command_state = handler_state.command_state\r\nend\r\n\r\n---@param handler_state table\u003cstring, any\u003e\r\n---@param handler_constants table\u003cstring, any\u003e\r\n---@return ArkhamImport_CommandManager_HandlerResults|nil\r\nlocal function run_handlers(handler_state, handler_constants)\r\n    for command_name, _ in pairs(found_commands) do\r\n        local command = commands[command_name]\r\n        if command.runOn.handlers then\r\n            local error = call_handler(command.object, handler_state, handler_constants)\r\n            if error then return error end\r\n\r\n            if (handler_state.handled) then return end\r\n        end\r\n    end\r\nend\r\n\r\n---@param parameters ArkhamImport_CommandManager_HandlerArguments\r\n---@return ArkhamImport_CommandManager_HandlerResults\r\nfunction handle(parameters)\r\n    local handler_state, handler_constants = create_handler_state(parameters)\r\n\r\n    local error = run_handlers(handler_state, handler_constants)\r\n    if error then return error end\r\n\r\n    return {\r\n        handled = handler_state.handled,\r\n        card = handler_state.card,\r\n        zone = handler_state.zone,\r\n        is_successful = true\r\n    }\r\nend\r\n\r\n---@param description string\r\n---@return ArkhamImportCommandParserResult[]\r\nfunction parse(description)\r\n    local input = description\r\n\r\n    if #input\u003c=4 then return {} end\r\n\r\n    ---@type string\r\n    local current, l1, l2, l3 = \"\", \"\", \"\", \"\"\r\n\r\n    local concat = table.concat\r\n\r\n    local function advance()\r\n        current, l1, l2, l3 = l1, l2, l3, input:sub(1,1)\r\n        input = input:sub(2)\r\n    end\r\n\r\n    local function advance_all()\r\n        current, l1, l2, l3 = input:sub(1,1), input:sub(2,2), input:sub(3,3), input:sub(4,4)\r\n        input = input:sub(5)\r\n    end\r\n\r\n    advance_all()\r\n\r\n    ---@type ArkhamImportCommandParserResult[]\r\n    local results = {}\r\n\r\n    ---@type string\r\n    local command\r\n\r\n    ---@type string[]\r\n    local arguments = {}\r\n\r\n    ---@type string\r\n    local separator\r\n\r\n    ---@type string[]\r\n    local result = {}\r\n\r\n    while #current\u003e0 do\r\n        if current==\"\u003c\" and l1==\"?\" and l2 == \"?\" then\r\n            command = nil\r\n            arguments = {}\r\n            separator = l3\r\n            result = {}\r\n\r\n            advance_all()\r\n        elseif current == \"?\" and l1 == \"?\" and l2 == \"\u003e\" then\r\n            if not command then\r\n                table.insert(results, {\r\n                    command = concat(result),\r\n                    arguments = {}\r\n                })\r\n            else\r\n                table.insert(arguments, concat(result))\r\n                table.insert(results, {\r\n                    command = command,\r\n                    arguments = arguments\r\n                })\r\n            end\r\n\r\n            separator = nil\r\n            current, l1, l2, l3 = l3, input:sub(1,1), input:sub(2,2), input:sub(3,3)\r\n            input = input:sub(4)\r\n        elseif current == separator then\r\n            if not command then\r\n                command = concat(result)\r\n            else\r\n                table.insert(arguments, concat(result))\r\n            end\r\n            result = {}\r\n            advance()\r\n        else\r\n            if separator~=nil then\r\n                table.insert(result, current)\r\n            end\r\n            advance()\r\n        end\r\n    end\r\n\r\n    return results\r\nend",
  "LuaScriptState": "",
  "LuaScript_path": "CommandManager.a0b1de.ttslua",
  "MeasureMovement": false,
  "Name": "Checker_black",
  "Nickname": "Command Manager",
  "Snap": true,
  "Sticky": true,
  "Tooltip": true,
  "Transform": {
    "posX": 77.05995,
    "posY": 1.29592955,
    "posZ": 9.378033,
    "rotX": 359.989868,
    "rotY": 270.009918,
    "rotZ": 179.984467,
    "scaleX": 0.250000417,
    "scaleY": 0.250000417,
    "scaleZ": 0.250000417
  },
  "Value": 0,
  "XmlUI": ""
}