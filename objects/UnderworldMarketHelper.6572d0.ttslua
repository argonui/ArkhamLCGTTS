function onload(saved_data)
    generateButtonParams()

    if saved_data != '' then
        local loaded_data = JSON.decode(saved_data)
    end

    createAllButtons()

    cardPositions = {
        Vector(-0.22, 2, 7.2),
        Vector(-0.22, 2, 3.6),
        Vector(-0.22, 2, 0),
        Vector(-0.22, 2, -3.6),
        Vector(-0.22, 2, -7.2),
        Vector(-4.5, 2, 7.2),
        Vector(-4.5, 2, 3.6),
        Vector(-4.5, 2, 0),
        Vector(-4.5, 2, -3.6),
        Vector(-4.5, 2, -7.2)
    }

    setupDeckPosition = Vector(4.05, 0, -7.2)

    unrevealCardsWhenShifting = false

    self.addContextMenuItem("Keep cards revealed", toggleRevealCards)

    --todo need to worry about rotation when using vectors
    --todo create help button with explanations maybe
end

function toggleRevealCards()
    unrevealCardsWhenShifting = not unrevealCardsWhenShifting
end

function createAllButtons()
    self.createButton(b_setup)
    self.createButton(b_reveal)
    self.createButton(b_done)
end

function findOffsetDistance(p1, p2, obj)
    local yOffset = 0
    if obj ~= nil then
        local bounds = obj.getBounds()
        yOffset = (bounds.size.y - bounds.offset.y)
    end
    local deltaPos = {}
    deltaPos.x = (p2.x-p1.x)
    deltaPos.y = (p2.y-p1.y) + yOffset
    deltaPos.z = (p2.z-p1.z)
    return deltaPos
end

function setupHelper()
    local castOrigin = self.getPosition() + setupDeckPosition
    local deckGUID = false;

    local hitList = Physics.cast({
        origin       = castOrigin,
        direction    = {0,1,0},
        size         = {x=1, y=1, z=1},
        type         = 1,
        max_distance = 1
    })

    for _, hit in ipairs(hitList) do
        if hit.hit_object != self and hit.hit_object.tag == "Deck" then
            deckGUID = hit.hit_object.getGUID()
        end
    end

    if not deckGUID then
        print('Underworld Market Helper: No deck found.')
        return
    end

    local deck = getObjectFromGUID(deckGUID)

    if deck.getQuantity() ~= 10 then
        print('Underworld Market Helper: Deck must include exactly 10 cards.')
        return
    end

    local illicitCount = 0

    for _, card in ipairs(deck.getObjects()) do
        decodedGMNotes = JSON.decode(card.gm_notes)

        if decodedGMNotes ~= nil and string.find(decodedGMNotes.traits, "Illicit", 1, true) then
            illicitCount = illicitCount + 1
        end
    end

    if illicitCount ~= 10 then
        print('Underworld Market Helper: Deck must include 10 Illicit cards.')
        return
    end

    if deck.is_face_down then
        deck.shuffle()
    else
        deck.flip()
        deck.shuffle()
    end

    Wait.time(function()
        for i, card in ipairs(deck.getObjects()) do
            deck.takeObject({
                rotation = self.getRotation() + Vector(0, 0, 180),
                position = self.getPosition() + cardPositions[i]
            })
        end
    end, 0.5)
end

function revealFirstTwoCards()
    local count = 0
    
    for i, pos in ipairs(cardPositions) do
        local hitList = Physics.cast({
            origin       = self.getPosition() + cardPositions[i],
            direction    = {0,-1,0},
            size         = {x=1, y=1, z=1},
            type         = 1,
            max_distance = 2
        })

        for _, hit in ipairs(hitList) do
            if hit.hit_object != self and hit.hit_object.tag == "Card" then
                count = count + 1

                if hit.hit_object.is_face_down then
                    hit.hit_object.flip()
                end
            end
        end

        if count == 2 then
            break
        end
    end
end

function shiftCards()
    local cards = {}
    local count = 0
    local firstCardGUID = nil
    local secondCardGUID = nil
    
    for i, pos in ipairs(cardPositions) do
        local hitList = Physics.cast({
            origin       = self.getPosition() + cardPositions[i],
            direction    = {0,-1,0},
            size         = {x=1, y=1, z=1},
            type         = 1,
            max_distance = 2
        })

        local hitGUID = nil

        for _, hit in ipairs(hitList) do
            if hit.hit_object != self and hit.hit_object.tag == "Card" then
                table.insert(cards, hit.hit_object.getGUID())
                count = count + 1
                hitGUID = hit.hit_object.getGUID()
            end
        end

        if i == 1 then
            firstCardGUID = hitGUID
        end

        if i == 2 then
            secondCardGUID = hitGUID
        end
    end

    if count >= 2 then
        local firstCard = nil
        local secondCard = nil

        if firstCardGUID ~= nil then
            firstCard = getObjectFromGUID(firstCardGUID)
        end

        if secondCardGUID ~= nil then
            secondCard = getObjectFromGUID(secondCardGUID)
        end

        if firstCard ~= nil and secondCard ~= nil then
            local shiftingCard = table.remove(cards, 1)
            table.insert(cards, shiftingCard)

            shiftingCard = table.remove(cards, 1)
            table.insert(cards, shiftingCard)

            maybeFlip(firstCard)
            maybeFlip(secondCard)
        elseif firstCard ~= nil then
            local shiftingCard = table.remove(cards, 1)
            table.insert(cards, shiftingCard)

            maybeFlip(firstCard)
        elseif secondCard ~= nil then
            local shiftingCard = table.remove(cards, 1)
            table.insert(cards, shiftingCard)

            maybeFlip(secondCard)
        end

        for i, cardGUID in ipairs(cards) do
            local card = getObjectFromGUID(cardGUID)
            card.setPositionSmooth(self.getPosition() + cardPositions[i], false, false)
        end
    end
end

function maybeFlip(card)
    if unrevealCardsWhenShifting and not card.is_face_down then
        card.flip()
    end
end

function generateButtonParams()
    b_setup = {
        click_function = 'setupHelper',
        function_owner = self,
        label = 'Setup',
        position = {1.6,0.05,-1.38},
        width = 275,
        height = 35,
        font_size = 50
    }
    b_reveal = {
        click_function = 'revealFirstTwoCards',
        function_owner = self,
        label = 'Reveal',
        position = {-1.6,0.05,-1.38},
        width = 275,
        height = 35,
        font_size = 50
    }
    b_done = {
        click_function = 'shiftCards',
        function_owner = self,
        label = 'Done',
        position = {-1.6,0.05,-0.98},
        width = 275,
        height = 35,
        font_size = 50
    }
end