{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomToken": {
      "MergeDistancePixels": 15,
      "Stackable": false,
      "StandUp": false,
      "Thickness": 0.100000009
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "",
    "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1838054223124059668/0BF8F541309E717BA84987BD554675A2FD06AF9F/",
    "WidthScale": 0
  },
  "Description": "Displays the content of the chaos bag in tabular fashion.\n\nSee context menu for additional information.",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "022907",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "-- Token Arranger\r\n-- created by:      Chr1Z\r\n-- original by:     Whimsical\r\n-- description:     displays the content of the chaos bag\r\ninformation = {\r\n    version = \"1.6\",\r\n    last_updated = \"10.10.2022\"\r\n}\r\n\r\n-- names of tokens in order\r\ntoken_names = {\r\n    \"Elder Sign\",\r\n    \"Skull\",\r\n    \"Cultist\",\r\n    \"Tablet\",\r\n    \"Elder Thing\",\r\n    \"Auto-fail\",\r\n    \"Bless\",\r\n    \"Curse\",\r\n    \"Frost\",\r\n    \"\"\r\n}\r\n\r\n-- common parameters\r\nlocal BUTTON_PARAMETERS          = {}\r\nBUTTON_PARAMETERS.function_owner = self\r\nBUTTON_PARAMETERS.label          = \"\"\r\nBUTTON_PARAMETERS.tooltip        = \"Add / Remove\"\r\nBUTTON_PARAMETERS.color          = { 0, 0, 0, 0 }\r\nBUTTON_PARAMETERS.width          = 325\r\nBUTTON_PARAMETERS.height         = 325\r\n\r\nlocal INPUT_PARAMETERS          = {}\r\nINPUT_PARAMETERS.function_owner = self\r\nINPUT_PARAMETERS.font_size      = 100\r\nINPUT_PARAMETERS.width          = 250\r\nINPUT_PARAMETERS.height         = INPUT_PARAMETERS.font_size + 23\r\nINPUT_PARAMETERS.alignment      = 3\r\nINPUT_PARAMETERS.validation     = 2\r\nINPUT_PARAMETERS.tab            = 2\r\n\r\n-- tag for cloned tokens\r\nTO_DELETE_TAG = \"to_be_deleted\"\r\n\r\nfunction onSave() return JSON.encode(token_precedence) end\r\n\r\nfunction onload(save_state)\r\n    if save_state ~= nil then\r\n        token_precedence = JSON.decode(save_state)\r\n    else\r\n        -- token modifiers for sorting (and order for same modifier)\r\n        -- order starts at 2 because there is a \"+1\" token\r\n        token_precedence = {\r\n            [\"Elder Sign\"]  = { 100, 2 },\r\n            [\"Skull\"]       = { -1, 3 },\r\n            [\"Cultist\"]     = { -2, 4 },\r\n            [\"Tablet\"]      = { -3, 5 },\r\n            [\"Elder Thing\"] = { -4, 6 },\r\n            [\"Auto-fail\"]   = { -100, 7 },\r\n            [\"Bless\"]       = { 101, 8 },\r\n            [\"Curse\"]       = { -101, 9 },\r\n            [\"Frost\"]       = { -99, 10 },\r\n            [\"\"]            = { 0, 11 }\r\n        }\r\n    end\r\n\r\n    updating = false\r\n\r\n    -- create UI\r\n    local offset = 0.725\r\n    local pos = {\r\n        x = { -1.067, 0.377 },\r\n        z = -2.175\r\n    }\r\n\r\n    -- button and inputs index 1-10\r\n    for i = 1, 10 do\r\n        if i \u003c 6 then\r\n            BUTTON_PARAMETERS.position = { pos.x[1], 0, pos.z + i * offset }\r\n            INPUT_PARAMETERS.position  = { pos.x[1] + offset, 0.1, pos.z + i * offset }\r\n        else\r\n            BUTTON_PARAMETERS.position = { pos.x[2], 0, pos.z + (i - 5) * offset }\r\n            INPUT_PARAMETERS.position  = { pos.x[2] + offset, 0.1, pos.z + (i - 5) * offset }\r\n        end\r\n\r\n        BUTTON_PARAMETERS.click_function = attachIndex(\"tokenClick\", i)\r\n        INPUT_PARAMETERS.input_function  = attachIndex2(\"tokenInput\", i)\r\n        INPUT_PARAMETERS.value           = token_precedence[token_names[i]][1]\r\n\r\n        self.createButton(BUTTON_PARAMETERS)\r\n        self.createInput(INPUT_PARAMETERS)\r\n    end\r\n\r\n    -- index 11: \"Update / Hide\" button\r\n    BUTTON_PARAMETERS.label          = \"Update / Hide\"\r\n    BUTTON_PARAMETERS.click_function = \"layout\"\r\n    BUTTON_PARAMETERS.tooltip        = \"Left-Click: Update!\\nRight-Click: Hide Tokens!\"\r\n    BUTTON_PARAMETERS.position       = { 0.725, 0.1, 2.025 }\r\n    BUTTON_PARAMETERS.color          = { 1, 1, 1 }\r\n    BUTTON_PARAMETERS.width          = 675\r\n    BUTTON_PARAMETERS.height         = 175\r\n    self.createButton(BUTTON_PARAMETERS)\r\n\r\n    self.addContextMenuItem(\"More Information\", function()\r\n        printToAll(\"------------------------------\", \"White\")\r\n        printToAll(\"Token Arranger v\" .. information[\"version\"] .. \" by Chr1Z\", \"Orange\")\r\n        printToAll(\"last updated: \" .. information[\"last_updated\"], \"White\")\r\n        printToAll(\"original concept by Whimsical\", \"White\")\r\n    end)\r\nend\r\n\r\n-- helper functions to carry index\r\nfunction attachIndex(click_function, index)\r\n    local fn_name = click_function .. index\r\n    _G[fn_name] = function(obj, player_color, alt_click)\r\n        _G[click_function](obj, player_color, alt_click, index)\r\n    end\r\n    return fn_name\r\nend\r\n\r\nfunction attachIndex2(input_function, index)\r\n    local fn_name = input_function .. index\r\n    _G[fn_name] = function(obj, player_color, input, selected)\r\n        _G[input_function](obj, player_color, input, selected, index)\r\n    end\r\n    return fn_name\r\nend\r\n\r\n-- click_function for buttons on chaos tokens\r\nfunction tokenClick(obj, player_color, alt_click, index)\r\n    if not updating then\r\n        updating = true\r\n        if alt_click then\r\n            token_precedence[token_names[index]][1] = token_precedence[token_names[index]][1] - 1\r\n        else\r\n            token_precedence[token_names[index]][1] = token_precedence[token_names[index]][1] + 1\r\n        end\r\n        self.editInput({ index = index - 1, value = token_precedence[token_names[index]][1] })\r\n        layout()\r\n    end\r\nend\r\n\r\n-- input_function for input_boxes\r\nfunction tokenInput(obj, player_color, input, selected, index)\r\n    if selected == false and not updating then\r\n        updating = true\r\n        local num = tonumber(input)\r\n        if num ~= nil then\r\n            token_precedence[token_names[index]][1] = num\r\n        end\r\n        layout()\r\n    end\r\nend\r\n\r\n-- order function for data sorting\r\nfunction token_value_comparator(left, right)\r\n    if left.value \u003e right.value then return true\r\n    elseif right.value \u003e left.value then return false\r\n    elseif left.order \u003c right.order then return true\r\n    elseif right.order \u003c left.order then return false\r\n    else return left.token.getGUID() \u003e right.token.getGUID()\r\n    end\r\nend\r\n\r\n-- get chaos bag from scripting zone and description\r\nfunction getChaosBag()\r\n    local chaosbag = nil\r\n    local chaosbag_zone = getObjectFromGUID(\"83ef06\")\r\n\r\n    -- error handling: scripting zone not found\r\n    if chaosbag_zone == nil then\r\n        printToAll(\"Zone for chaos bag detection couldn't be found.\", \"Red\")\r\n        return nil\r\n    end\r\n\r\n    for _, v in ipairs(chaosbag_zone.getObjects()) do\r\n        if v.getDescription() == \"Chaos Bag\" then\r\n            chaosbag = getObjectFromGUID(v.getGUID())\r\n            break\r\n        end\r\n    end\r\n\r\n    -- error handling: chaos bag not found\r\n    if chaosbag == nil then\r\n        printToAll(\"Chaos bag couldn't be found.\", \"Red\")\r\n    end\r\n    return chaosbag\r\nend\r\n\r\n-- main function (delete old tokens, clone chaos bag content, sort it and position it)\r\nfunction layout(_, _, isRightClick)\r\n    -- delete previously pulled out tokens\r\n    for _, token in ipairs(getObjectsWithTag(TO_DELETE_TAG)) do token.destruct() end\r\n\r\n    -- stop here if right-clicked\r\n    if isRightClick then return end\r\n\r\n    local chaos_bag = getChaosBag()\r\n    local chaos_bag_objects = chaos_bag.getObjects()\r\n\r\n    -- take each token out and clone it\r\n    for _, data in ipairs(chaos_bag_objects) do\r\n        chaos_bag.takeObject {\r\n            guid = data.guid,\r\n            smooth = false,\r\n            callback_function = function(tok)\r\n                chaos_bag.putObject(tok.clone())\r\n                tok.addTag(TO_DELETE_TAG)\r\n            end\r\n        }\r\n    end\r\n\r\n    -- wait until all tokens have finished spawning\r\n    Wait.condition(function() do_position() end,\r\n        function() return #chaos_bag_objects == #getObjectsWithTag(TO_DELETE_TAG) end)\r\nend\r\n\r\n-- position tokens sorted by value\r\nfunction do_position()\r\n    local data = {}\r\n\r\n    -- create table with tokens\r\n    for i, token in ipairs(getObjectsWithTag(TO_DELETE_TAG)) do\r\n        local name = token.getName()\r\n        local value = tonumber(name)\r\n        local precedence = token_precedence[name]\r\n\r\n        data[i] = {\r\n            token = token,\r\n            value = value or precedence[1]\r\n        }\r\n\r\n        if precedence ~= nil then\r\n            data[i].order = precedence[2]\r\n        else\r\n            data[i].order = value\r\n        end\r\n    end\r\n\r\n    -- sort table by value (symbols last if same value)\r\n    table.sort(data, token_value_comparator)\r\n\r\n    -- laying out the tokens\r\n    local pos           = self.getPosition() + Vector(3.55, -0.05, -3.95)\r\n    local location      = { x = pos.x, y = pos.y, z = pos.z }\r\n    local current_value = data[1].value\r\n\r\n    for _, item in ipairs(data) do\r\n        if item.value ~= current_value then\r\n            location.x = location.x - 1.75\r\n            location.z = pos.z\r\n            current_value = item.value\r\n        end\r\n        item.token.setPosition(location)\r\n        item.token.setRotation(self.getRotation())\r\n        location.z = location.z - 1.75\r\n    end\r\n    updating = false\r\nend",
  "LuaScriptState_path": "TokenArranger.022907.txt",
  "LuaScript_path": "TokenArranger.022907.ttslua",
  "MeasureMovement": false,
  "Name": "Custom_Token",
  "Nickname": "Token Arranger",
  "Snap": true,
  "Sticky": true,
  "Tooltip": true,
  "Transform": {
    "posX": 22.9512024,
    "posY": 5.242346,
    "posZ": -30.2954159,
    "rotX": 0.5792924,
    "rotY": 270.038269,
    "rotZ": 0.178260192,
    "scaleX": 2,
    "scaleY": 1,
    "scaleZ": 2
  },
  "Value": 0,
  "XmlUI": ""
}