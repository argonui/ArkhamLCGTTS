{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomTile": {
      "Stackable": false,
      "Stretch": true,
      "Thickness": 0.1,
      "Type": 3
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "http://cloud-3.steamusercontent.com/ugc/1838053776205435595/ECFB88938ADBD1EF7AEF713111A11330FD9FAA5A/",
    "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1838053776205435595/ECFB88938ADBD1EF7AEF713111A11330FD9FAA5A/",
    "WidthScale": 0
  },
  "Description": "Searches your top X cards by setting your hand aside and putting the cards into your hand.\n\nPut the target of your search on your set aside hand.\n\nSelect \"Shuffle\" or \"No Shuffle\" to put the cards back in your deck.\n\nCheck context menu for additional information.",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "17aed0",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "-- Search Assistant\n-- made by:         Chr1Z\n-- original by:     Tikatoy\n-- description:     search the top X cards of your deck\ninformation = {\n    version = \"1.3\",\n    last_updated = \"26.09.2022\"\n}\n\nMAT_GUIDS = { \"8b081b\", \"bd0ff4\", \"383d8b\", \"0840d5\" }\n\n-- common parameters\nlocal BUTTON_PARAMETERS          = {}\nBUTTON_PARAMETERS.function_owner = self\nBUTTON_PARAMETERS.font_size      = 125\nBUTTON_PARAMETERS.width          = 650\nBUTTON_PARAMETERS.height         = 225\n\nlocal INPUT_PARAMETERS          = {}\nINPUT_PARAMETERS.function_owner = self\nINPUT_PARAMETERS.input_function = \"updateSearchNumber\"\nINPUT_PARAMETERS.tooltip        = \"number of cards to search\"\nINPUT_PARAMETERS.label          = \"#\"\nINPUT_PARAMETERS.font_size      = 175\nINPUT_PARAMETERS.width          = 400\nINPUT_PARAMETERS.height         = INPUT_PARAMETERS.font_size + 23\nINPUT_PARAMETERS.position       = { 0, 0.1, 0 }\nINPUT_PARAMETERS.alignment      = 3\nINPUT_PARAMETERS.validation     = 2\n\nfunction onLoad(save_state)\n    if save_state ~= nil then\n        local loaded_data = JSON.decode(save_state)\n        if loaded_data.playerColor ~= nil then\n            playerColor = loaded_data.playerColor\n        end\n    end\n\n    if playerColor == nil then\n        playerColor = Player.getAvailableColors()[1]\n    end\n\n    normalView()\n\n    self.addContextMenuItem(\"More Information\", function()\n        printToAll(\"------------------------------\", \"White\")\n        printToAll(\"Search Assistant v\" .. information[\"version\"] .. \" by Chr1Z\", \"Orange\")\n        printToAll(\"last updated: \" .. information[\"last_updated\"], \"White\")\n        printToAll(\"original concept by Tikatoy\", \"White\")\n    end)\nend\n\nfunction onSave()\n    return JSON.encode({ playerColor = playerColor })\nend\n\n-- regular view with search box and color switcher\nfunction normalView()\n    self.clearButtons()\n    self.clearInputs()\n\n    createSearchButton()\n    changeColor(\"initialize\")\n    self.createInput(INPUT_PARAMETERS)\nend\n\n-- view during a search with \"done\" buttons\nfunction searchView()\n    self.clearButtons()\n    self.clearInputs()\n\n    createDoneButton(true)\n    createDoneButton(false)\nend\n\n-- change color (or initialize button)\nfunction changeColor(arg)\n    if arg ~= \"initialize\" then\n        -- update table with colors\n        COLORS = Player.getAvailableColors()\n        table.insert(COLORS, COLORS[1])\n\n        -- get index of current color and move up one step\n        local pos = indexOf(COLORS, playerColor)\n        if pos == nil then pos = 0 end\n        playerColor = COLORS[pos + 1]\n\n        -- remove button and recreate it afterwards\n        self.removeButton(1)\n    end\n\n    BUTTON_PARAMETERS.click_function = \"changeColor\"\n    BUTTON_PARAMETERS.tooltip        = \"change color\"\n    BUTTON_PARAMETERS.position       = { 0, 0.1, -0.65 }\n    BUTTON_PARAMETERS.label          = playerColor\n    BUTTON_PARAMETERS.color          = Color.fromString(playerColor)\n    BUTTON_PARAMETERS.hover_color    = BUTTON_PARAMETERS.color\n    self.createButton(BUTTON_PARAMETERS)\nend\n\n-- create the search button\nfunction createSearchButton()\n    BUTTON_PARAMETERS.click_function = \"startSearch\"\n    BUTTON_PARAMETERS.tooltip        = \"start the search\"\n    BUTTON_PARAMETERS.position       = { 0, 0.1, 0.65 }\n    BUTTON_PARAMETERS.label          = \"Search\"\n    BUTTON_PARAMETERS.color          = Color.fromString(\"White\")\n    BUTTON_PARAMETERS.hover_color    = nil\n    self.createButton(BUTTON_PARAMETERS)\nend\n\n-- create the done buttons (with and without shuffle)\nfunction createDoneButton(arg)\n    if arg then\n        BUTTON_PARAMETERS.click_function = \"endSearch1\"\n        BUTTON_PARAMETERS.tooltip        = \"Done (Shuffle)\"\n        BUTTON_PARAMETERS.position       = { 0, 0.1, -0.65 }\n        BUTTON_PARAMETERS.label          = \"Shuffle\"\n    else\n        BUTTON_PARAMETERS.click_function = \"endSearch2\"\n        BUTTON_PARAMETERS.tooltip        = \"Done (No Shuffle)\"\n        BUTTON_PARAMETERS.position       = { 0, 0.1, 0.65 }\n        BUTTON_PARAMETERS.label          = \"No Shuffle\"\n    end\n\n    BUTTON_PARAMETERS.color       = Color.fromString(\"White\")\n    BUTTON_PARAMETERS.hover_color = nil\n    self.createButton(BUTTON_PARAMETERS)\nend\n\n-- get the draw deck from the player mat\nfunction getDrawDeck()\n    mat.call(\"getDrawDiscardDecks\")\n    return mat.getVar(\"drawDeck\")\nend\n\n-- input_function to get number of cards to search\nfunction updateSearchNumber(_, _, input)\n    INPUT_PARAMETERS.value = tonumber(input)\nend\n\n-- start the search (change UI, set hand aside, draw cards)\nfunction startSearch(_, color)\n    if INPUT_PARAMETERS.value == nil then\n        printToColor(\"Enter the number of cards to search in the textbox.\", color, \"Orange\")\n        return\n    end\n\n    local hand_data = Player[playerColor].getHandTransform()\n\n    -- make distinction between players based on hand position\n    if hand_data.position.x \u003c -30 then\n        if hand_data.position.z \u003e 0 then\n            playerNumber = 1\n        else\n            playerNumber = 2\n        end\n    else\n        if hand_data.position.z \u003e 0 then\n            playerNumber = 3\n        else\n            playerNumber = 4\n        end\n    end\n\n    mat = getObjectFromGUID(MAT_GUIDS[playerNumber])\n    local zoneID = mat.getVar(\"zoneID\")\n\n    drawDeck = getDrawDeck()\n    if drawDeck == nil then\n        printToColor(\"Draw pile could not be found!\", color, \"Red\")\n        return\n    end\n\n    drawDeckPos = drawDeck.getPosition()\n    printToColor(\"Place target(s) of search on set aside hand.\", color, \"Green\")\n\n    -- get position for set aside cards\n    local hand = Player[playerColor].getHandObjects()\n    deck_rotation = { hand_data.rotation.x, hand_data.rotation.y + 180, 180 }\n\n    -- for left players (p1 and p3) move to the left, for right players (p2 and p4) to the right\n    if playerNumber == 1 or playerNumber == 3 then\n        set_aside_pos = hand_data.position - 15 * hand_data.right\n    else\n        set_aside_pos = hand_data.position + 15 * hand_data.right\n    end\n\n    for i = #hand, 1, -1 do\n        hand[i].setPosition(set_aside_pos - Vector(0, i * 0.3, 0))\n        hand[i].setRotation(deck_rotation)\n    end\n\n    searchView()\n\n    -- handling for Norman Withers\n    for i, object in ipairs(getObjectFromGUID(zoneID).getObjects()) do\n        if self.positionToLocal(object.getPosition()).z \u003c 0.5 and object.tag == \"Card\" and not object.is_face_down then\n            object.flip()\n            Wait.time(function()\n                drawDeck = getDrawDeck()\n            end, 1)\n            break\n        end\n    end\n\n    Wait.time(function()\n        drawDeck.deal(INPUT_PARAMETERS.value, playerColor)\n    end, 1)\nend\n\n-- place hand back into deck and optionally shuffle\nfunction endSearch1()\n    endSearch(\"true\")\nend\n\nfunction endSearch2()\n    endSearch(\"false\")\nend\n\nfunction endSearch(shuffle)\n    local hand = Player[playerColor].getHandObjects()\n\n    for i = #hand, 1, -1 do\n        hand[i].setPosition(drawDeckPos + Vector(0, 6 - i * 0.3, 0))\n        hand[i].setRotation(deck_rotation)\n    end\n\n    if shuffle == \"true\" then\n        Wait.time(function()\n            local deck = getDrawDeck()\n            if deck ~= nil then\n                deck.shuffle()\n            end\n        end, 2)\n    end\n\n    -- draw set aside cards (from the ground!)\n    local objs = Physics.cast({\n        origin = set_aside_pos - Vector(0, 5, 0),\n        direction = { x = 0, y = 1, z = 0 },\n        type = 3,\n        size = { 2, 2, 2 }\n    })\n\n    for i, v in ipairs(objs) do\n        local obj = v.hit_object\n        if obj.tag == \"Deck\" then\n            Wait.time(function()\n                obj.deal(#obj.getObjects(), playerColor)\n            end, 1)\n            break\n        end\n    end\n\n    normalView()\nend\n\n-- helper to search array\nfunction indexOf(array, value)\n    for i, v in ipairs(array) do\n        if v == value then\n            return i\n        end\n    end\nend",
  "LuaScriptState": "{\"playerColor\":\"White\"}",
  "LuaScript_path": "SearchAssistant.17aed0.ttslua",
  "MeasureMovement": false,
  "Name": "Custom_Tile",
  "Nickname": "Search Assistant",
  "Snap": true,
  "Sticky": true,
  "Tags": [
    "CleanUpHelper_ignore"
  ],
  "Tooltip": true,
  "Transform": {
    "posX": 29.2449589,
    "posY": 8.401558,
    "posZ": -27.0894718,
    "rotX": 359.9201,
    "rotY": 269.997833,
    "rotZ": 0.0168794841,
    "scaleX": 1,
    "scaleY": 1,
    "scaleZ": 1
  },
  "Value": 0,
  "XmlUI": ""
}