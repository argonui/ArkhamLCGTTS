{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomToken": {
      "MergeDistancePixels": 15,
      "Stackable": false,
      "StandUp": false,
      "Thickness": 0.1
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "",
    "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1850441528393599634/FA79B99F5544D16D38DCC8A26F1CEB3E7D9FED17/",
    "WidthScale": 0
  },
  "Description": "Cleans up the table for the next scenario.\n\nSee context menu for additional information.",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "26cf4b",
  "Grid": true,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "-- Clean Up Helper\r\n-- made by:         Chr1Z\r\n-- description:     Cleans up the table for the next scenario in a campaign:\r\n--                  - sets counters to default values (resources and doom) or trauma values (health and sanity, if not disabled) from campaign log\r\n--                  - puts everything on playmats and hands into respective trashcans\r\n--                  - use the IGNORE_TAG to exclude objects from tidying (default: \"CleanUpHelper_Ignore\")\r\ninformation = {\r\n    version = \"2.0\",\r\n    last_updated = \"10.10.2022\"\r\n}\r\n\r\n-- enable this for debugging\r\nSHOW_RAYS = false\r\n\r\n-- these objects will be ignored\r\nIGNORE_GUIDS = {\r\n    -- big playmat, change image panel and investigator counter\r\n    \"b7b45b\"; \"f182ee\"; \"721ba2\";\r\n    -- bless/curse manager\r\n    \"afa06b\"; \"bd0253\"; \"5933fb\";\r\n    -- stuff on agenda/act playmat\r\n    \"85c4c6\"; \"4a3aa4\"; \"fea079\"; \"b015d8\"; \"11e0cf\"; \"9f334f\"; \"70b9f6\"; \"0a5a29\";\r\n    -- doom/location token bag\r\n    \"47ffc3\"; \"170f10\";\r\n    -- table\r\n    \"4ee1f2\"\r\n}\r\n\r\n-- objects with this tag will be ignored\r\nIGNORE_TAG = \"CleanUpHelper_ignore\"\r\n\r\n-- colors and order for following tables\r\nCOLORS = { \"White\"; \"Orange\"; \"Green\"; \"Red\"; \"Agenda\" }\r\n\r\n-- counter GUIDS (4x damage, 4x sanity, 4x resource and 1x doom)\r\nTOKEN_GUIDS = {\r\n    \"eb08d6\"; \"e64eec\"; \"1f5a0a\"; \"591a45\";\r\n    \"468e88\"; \"0257d9\"; \"7b5729\"; \"beb964\";\r\n    \"4406f0\"; \"816d84\"; \"cd15ac\"; \"a4b60d\";\r\n    \"85c4c6\"\r\n}\r\n\r\n-- default values (4x damage, 4x horror, 4x resources, 1x doom)\r\nDEFAULT_VALUES = {\r\n    0; 0; 0; 0;\r\n    0; 0; 0; 0;\r\n    5; 5; 5; 5;\r\n    0\r\n}\r\n\r\nPLAYERMAT_GUIDS = { \"8b081b\"; \"bd0ff4\"; \"383d8b\"; \"0840d5\" }\r\nCLUE_GUIDS      = { \"d86b7c\"; \"1769ed\"; \"032300\"; \"37be78\" }\r\nTRASHCAN_GUIDS  = { \"147e80\"; \"f7b6c8\"; \"5f896a\"; \"4b8594\"; \"70b9f6\" }\r\n\r\nPLAYMATZONE = getObjectFromGUID(\"a2f932\")\r\n\r\n-- values for physics.cast (4 entries for player zones, 5th entry for agenda/act deck, 6th for campaign log)\r\nPHYSICS_POSITION = {\r\n    { x = -54.5, y = 2, z = 21 };\r\n    { x = -54.5, y = 2, z = -21 };\r\n    { x = -25.0, y = 2, z = 26 };\r\n    { x = -25.0, y = 2, z = -26 };\r\n    { x = -02.0, y = 2, z = 10 };\r\n    { x = -00.0, y = 2, z = -27 }\r\n}\r\n\r\nPHYSICS_ROTATION = {\r\n    { x = 0, y = 270, z = 0 };\r\n    { x = 0, y = 270, z = 0 };\r\n    { x = 0, y = 000, z = 0 };\r\n    { x = 0, y = 180, z = 0 };\r\n    { x = 0, y = 270, z = 0 };\r\n    { x = 0, y = 000, z = 0 }\r\n}\r\n\r\nPHYSICS_SCALE = {\r\n    { x = 36.6, y = 1, z = 14.5 };\r\n    { x = 36.6, y = 1, z = 14.5 };\r\n    { x = 28.0, y = 1, z = 14.5 };\r\n    { x = 28.0, y = 1, z = 14.5 };\r\n    { x = 55.0, y = 1, z = 13.5 };\r\n    { x = 05.0, y = 1, z = 05.0 }\r\n}\r\n\r\nlocal BUTTON_PARAMETERS          = {}\r\nBUTTON_PARAMETERS.function_owner = self\r\n\r\n-- saving the options\r\nfunction onSave() return JSON.encode({ tidy_playermats, import_trauma, reset_resources }) end\r\n\r\nfunction onLoad(saved_data)\r\n    local loaded_data = JSON.decode(saved_data)\r\n    if loaded_data ~= nil then\r\n        tidy_playermats = loaded_data[1]\r\n        import_trauma   = loaded_data[2]\r\n        reset_resources = loaded_data[3]\r\n    else\r\n        tidy_playermats = true\r\n        import_trauma   = true\r\n        reset_resources = true\r\n    end\r\n\r\n    self.addContextMenuItem(\"More Information\", function()\r\n        printToAll(\"------------------------------\", \"White\")\r\n        printToAll(\"Clean Up Helper v\" .. information[\"version\"] .. \" by Chr1Z\", \"Orange\")\r\n        printToAll(\"last updated: \" .. information[\"last_updated\"], \"White\")\r\n        printToAll(\"ignore tag: \" .. IGNORE_TAG, \"White\")\r\n        printToAll(\"Player order in the campaign log for trauma import:\\nWhite, Orange, Green, Red\", \"White\")\r\n    end)\r\n\r\n    -- index 0: button as label\r\n    BUTTON_PARAMETERS.label          = \"Clean Up Helper v\" .. information[\"version\"]\r\n    BUTTON_PARAMETERS.click_function = \"none\"\r\n    BUTTON_PARAMETERS.position       = { x = 0, y = 0.1, z = -1.525 }\r\n    BUTTON_PARAMETERS.height         = 0\r\n    BUTTON_PARAMETERS.width          = 0\r\n    BUTTON_PARAMETERS.font_size      = 165\r\n    BUTTON_PARAMETERS.font_color     = \"Black\"\r\n    self.createButton(BUTTON_PARAMETERS)\r\n\r\n    -- index 1: option button for playermats\r\n    BUTTON_PARAMETERS.label          = \"Tidy playermats: \" .. (tidy_playermats and \"✓\" or \"✗\")\r\n    BUTTON_PARAMETERS.color          = { 0, 0, 0, 0.95 }\r\n    BUTTON_PARAMETERS.click_function = \"toggle1\"\r\n    BUTTON_PARAMETERS.position.z     = -0.8\r\n    BUTTON_PARAMETERS.height         = 275\r\n    BUTTON_PARAMETERS.width          = 1550\r\n    BUTTON_PARAMETERS.font_size      = 165\r\n    BUTTON_PARAMETERS.font_color     = \"White\"\r\n    self.createButton(BUTTON_PARAMETERS)\r\n\r\n    -- index 2: option button for trauma import\r\n    BUTTON_PARAMETERS.label          = \"Import trauma: \" .. (import_trauma and \"✓\" or \"✗\")\r\n    BUTTON_PARAMETERS.click_function = \"toggle2\"\r\n    BUTTON_PARAMETERS.position.z     = -0.1\r\n    self.createButton(BUTTON_PARAMETERS)\r\n\r\n    -- index 3: option button for resources\r\n    BUTTON_PARAMETERS.label          = \"Reset resources: \" .. (reset_resources and \"✓\" or \"✗\")\r\n    BUTTON_PARAMETERS.click_function = \"toggle3\"\r\n    BUTTON_PARAMETERS.position.z     = 0.6\r\n    self.createButton(BUTTON_PARAMETERS)\r\n\r\n    -- index 4: start button\r\n    BUTTON_PARAMETERS.label          = \"Start!\"\r\n    BUTTON_PARAMETERS.click_function = \"cleanUp\"\r\n    BUTTON_PARAMETERS.position.z     = 1.3\r\n    BUTTON_PARAMETERS.width          = 775\r\n    self.createButton(BUTTON_PARAMETERS)\r\n\r\n    -- create single table for ignoring\r\n    for _, v in ipairs(CLUE_GUIDS) do table.insert(IGNORE_GUIDS, v) end\r\n    for _, v in ipairs(TRASHCAN_GUIDS) do table.insert(IGNORE_GUIDS, v) end\r\n    for _, v in ipairs(PLAYERMAT_GUIDS) do table.insert(IGNORE_GUIDS, v) end\r\n    for _, v in ipairs(TOKEN_GUIDS) do table.insert(IGNORE_GUIDS, v) end\r\nend\r\n\r\n---------------------------------------------------------\r\n-- click functions for option buttons\r\n---------------------------------------------------------\r\nfunction toggle1()\r\n    tidy_playermats = not tidy_playermats\r\n    self.editButton({ index = 1, label = \"Tidy playermats: \" .. (tidy_playermats and \"✓\" or \"✗\") })\r\nend\r\n\r\nfunction toggle2()\r\n    import_trauma = not import_trauma\r\n    self.editButton({ index = 2, label = \"Import trauma: \" .. (import_trauma and \"✓\" or \"✗\") })\r\nend\r\n\r\nfunction toggle3()\r\n    reset_resources = not reset_resources\r\n    self.editButton({ index = 3, label = \"Reset resources: \" .. (reset_resources and \"✓\" or \"✗\") })\r\nend\r\n\r\n---------------------------------------------------------\r\n-- main function\r\n---------------------------------------------------------\r\n\r\nfunction cleanUp()\r\n    printToAll(\"------------------------------\", \"White\")\r\n    printToAll(\"Clean up started!\", \"Orange\")\r\n    printToAll(\"Resetting counters...\", \"White\")\r\n\r\n    getTrauma()\r\n    resetCounters()\r\n\r\n    printToAll(\"Discarding player hands...\", \"White\")\r\n    discardHands()\r\n\r\n    printToAll(\"Tidying big playmat...\", \"White\")\r\n    startLuaCoroutine(self, \"tidyPlaymatCoroutine\")\r\nend\r\n\r\n---------------------------------------------------------\r\n-- modular functions, called by other functions\r\n---------------------------------------------------------\r\n\r\n-- set counters to reset values\r\nfunction resetCounters()\r\n    for i, guid in ipairs(TOKEN_GUIDS) do\r\n        -- skip this step for resource tokens when option disabled (token number 9-12)\r\n        if reset_resources or (i \u003c 9 or i \u003e 12) then\r\n            local TOKEN = getObjectFromGUID(guid)\r\n            if TOKEN ~= nil then\r\n                TOKEN.setVar(\"val\", RESET_VALUES[i])\r\n                TOKEN.call(\"updateVal\")\r\n                TOKEN.call(\"updateSave\")\r\n            else\r\n                printToAll(\"Token number \" .. i .. \" could not be found and was skipped.\", \"Yellow\")\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\n-- read values for trauma from campaign log if enabled\r\nfunction getTrauma()\r\n    -- load default values\r\n    RESET_VALUES = {}\r\n    for k, v in pairs(DEFAULT_VALUES) do\r\n        RESET_VALUES[k] = v\r\n    end\r\n\r\n    -- stop here if trauma import is disabled\r\n    if not import_trauma then\r\n        printToAll(\"Default values for health and sanity loaded.\", \"Yellow\")\r\n        return\r\n    end\r\n\r\n    -- get campaign log\r\n    local c_log = findObjects(6)[1]\r\n    if c_log == nil then\r\n        printToAll(\"Campaign log not found in standard position!\", \"Yellow\")\r\n        printToAll(\"Default values for health and sanity loaded.\", \"Yellow\")\r\n        return\r\n    end\r\n\r\n    -- get data from campaign log if possible\r\n    local counterData = c_log.hit_object.getVar(\"ref_buttonData\")\r\n    if counterData ~= nil then\r\n        printToAll(\"Trauma values found in campaign log!\", \"Green\")\r\n        for i = 1, 10, 3 do\r\n            RESET_VALUES[1 + (i - 1) / 3] = counterData.counter[i].value\r\n            RESET_VALUES[5 + (i - 1) / 3] = counterData.counter[i + 1].value\r\n        end\r\n    else\r\n        printToAll(\"Trauma values could not be found in campaign log!\", \"Yellow\")\r\n        printToAll(\"Default values for health and sanity loaded.\", \"Yellow\")\r\n    end\r\nend\r\n\r\n-- discard all hand objects\r\nfunction discardHands()\r\n    for i = 1, 4 do\r\n        local trashcan = getObjectFromGUID(TRASHCAN_GUIDS[i])\r\n        local hand = Player[COLORS[i]].getHandObjects()\r\n        if trashcan == nil then return end\r\n        for j = #hand, 1, -1 do trashcan.putObject(hand[j]) end\r\n    end\r\nend\r\n\r\n-- clean up for big playmat\r\nfunction tidyPlaymatCoroutine()\r\n    local trashcan = getObjectFromGUID(TRASHCAN_GUIDS[5])\r\n\r\n    if PLAYMATZONE == nil then\r\n        printToAll(\"Scripting zone for big playmat could not be found!\", \"Red\")\r\n    elseif trashcan == nil then\r\n        printToAll(\"Trashcan for big playmat could not be found!\", \"Red\")\r\n    else\r\n        for _, obj in ipairs(PLAYMATZONE.getObjects()) do\r\n            -- ignore these elements\r\n            if indexOf(IGNORE_GUIDS, obj.getGUID()) == nil and obj.hasTag(IGNORE_TAG) == false then\r\n                coroutine.yield(0)\r\n                trashcan.putObject(obj)\r\n            end\r\n        end\r\n    end\r\n    printToAll(\"Tidying playermats and agenda mat...\", \"White\")\r\n    startLuaCoroutine(self, \"tidyPlayerMatCoroutine\")\r\n    return 1\r\nend\r\n\r\n-- clean up for the four playermats and the agenda/act playmat\r\nfunction tidyPlayerMatCoroutine()\r\n    for i = 1, 5 do\r\n        -- skip playermat (1-4) if option disabled\r\n        if tidy_playermats or i == 5 then\r\n            -- delay for animation purpose\r\n            for k = 1, 30 do coroutine.yield(0) end\r\n\r\n            -- get respective trashcan\r\n            local trashcan = getObjectFromGUID(TRASHCAN_GUIDS[i])\r\n            if trashcan == nil then\r\n                printToAll(\"Trashcan for \" .. COLORS[i] .. \" playmat could not be found!\", \"Red\")\r\n                return\r\n            end\r\n\r\n            for _, entry in ipairs(findObjects(i)) do\r\n                local obj = entry.hit_object\r\n                local desc_low = string.lower(obj.getDescription())\r\n\r\n                -- ignore these elements\r\n                if indexOf(IGNORE_GUIDS, obj.getGUID()) == nil and\r\n                    obj.hasTag(IGNORE_TAG) == false and\r\n                    desc_low ~= \"action token\" then\r\n                    coroutine.yield(0)\r\n                    trashcan.putObject(obj)\r\n\r\n                    -- flip action tokens back to ready\r\n                elseif desc_low == \"action token\" and obj.is_face_down then\r\n                    obj.flip()\r\n                end\r\n            end\r\n        end\r\n    end\r\n    printToAll(\"Clean up completed!\", \"Green\")\r\n    return 1\r\nend\r\n\r\n---------------------------------------------------------\r\n-- helper functions\r\n---------------------------------------------------------\r\n\r\n-- find objects depending on index (1 to 4 for playermats, 5 for agenda/act playmat, 6 for campaign log)\r\nfunction findObjects(num)\r\n    return Physics.cast({\r\n        direction    = { 0, 1, 0 },\r\n        max_distance = 2,\r\n        type         = 3,\r\n        size         = PHYSICS_SCALE[num],\r\n        origin       = PHYSICS_POSITION[num],\r\n        orientation  = PHYSICS_ROTATION[num],\r\n        debug        = SHOW_RAYS\r\n    })\r\nend\r\n\r\n-- helper to search array\r\nfunction indexOf(array, value)\r\n    for i, v in ipairs(array) do\r\n        if v == value then\r\n            return i\r\n        end\r\n    end\r\nend",
  "LuaScriptState": "[true,true,true]",
  "LuaScript_path": "CleanUpHelper.26cf4b.ttslua",
  "MeasureMovement": false,
  "Name": "Custom_Token",
  "Nickname": "Clean Up Helper",
  "Snap": true,
  "Sticky": true,
  "Tags": [
    "CleanUpHelper_ignore"
  ],
  "Tooltip": true,
  "Transform": {
    "posX": 30.9640026,
    "posY": 4.13152361,
    "posZ": -20.81428,
    "rotX": 359.918335,
    "rotY": 269.9996,
    "rotZ": 0.0166441277,
    "scaleX": 1.2,
    "scaleY": 1,
    "scaleZ": 1.2
  },
  "Value": 0,
  "XmlUI": ""
}