{
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "Autoraise": true,
  "ColorDiffuse": {
    "b": 1,
    "g": 1,
    "r": 1
  },
  "CustomImage": {
    "CustomTile": {
      "Stackable": false,
      "Stretch": true,
      "Thickness": 0.1,
      "Type": 0
    },
    "ImageScalar": 1,
    "ImageSecondaryURL": "http://cloud-3.steamusercontent.com/ugc/1745699644170918010/4E5FCD0140AE8960A1E1272A1979E575EE12C3F3/",
    "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1745699644170918010/4E5FCD0140AE8960A1E1272A1979E575EE12C3F3/",
    "WidthScale": 0
  },
  "Description": "",
  "DragSelectable": true,
  "GMNotes": "",
  "GUID": "0ffbc5",
  "Grid": false,
  "GridProjection": false,
  "Hands": false,
  "HideWhenFaceDown": false,
  "IgnoreFoW": false,
  "LayoutGroupSortIndex": 0,
  "Locked": false,
  "LuaScript": "-- SCE Navigation Panel version 1.00\r\n\r\nfunction onLoad(saved_data)\r\n    self.createButton({\r\n        label=\"\",\r\n        tooltip=\"Display full overlay\",\r\n        click_function=\"displayFull\",\r\n        function_owner=self,\r\n        position={0.0,0.1,-0.57},\r\n        height=70,\r\n        width=800,\r\n        scale={x=1, y=1, z=1},\r\n        color={1,0,0,0}\r\n    })\r\n    self.createButton({\r\n        label=\"\",\r\n        tooltip=\"Display only play area\",\r\n        click_function=\"displayPlayArea\",\r\n        function_owner=self,\r\n        position={0.0,0.1,-0.30},\r\n        height=70,\r\n        width=800,\r\n        scale={x=1, y=1, z=1},\r\n        color={1,0,0,0}\r\n    })\r\n    self.createButton({\r\n        label=\"\",\r\n        tooltip=\"Close overlay\",\r\n        click_function=\"closeOverlay\",\r\n        function_owner=self,\r\n        position={0.0,0.1,-0.03},\r\n        height=70,\r\n        width=800,\r\n        scale={x=1, y=1, z=1},\r\n        color={1,0,0,0}\r\n    })\r\n    self.createButton({\r\n        label=\"\",\r\n        tooltip=\"Modify a camera position\",\r\n        click_function=\"beginSetCamera\",\r\n        function_owner=self,\r\n        position={0.0,0.1,0.37},\r\n        height=70,\r\n        width=800,\r\n        scale={x=1, y=1, z=1},\r\n        color={1,0,0,0}\r\n    })\r\n    self.createButton({\r\n        label=\"\",\r\n        tooltip=\"Reset camera positions to default\",\r\n        click_function=\"resetCameras\",\r\n        function_owner=self,\r\n        position={0.0,0.1,0.77},\r\n        height=70,\r\n        width=800,\r\n        scale={x=1, y=1, z=1},\r\n        color={1,0,0,0}\r\n    })\r\n\r\n    defaultCameraParams = {\r\n        {position={-1.626, -2.5, -0.064},   pitch=62.964, yaw=90.000,  distance=17.844},   --  1. ActAgenda\r\n        {position={-27.822, -2.5, 0.424},   pitch=75.823, yaw=90.000,  distance=-1.000},   --  2. Map\r\n--        {position={-31.592, -2.5, 26.392},  pitch=74.238, yaw=180.000, distance=19.858},   --  3. Green playmat\r\n        {position={-31.592, -2.5, 26.392},  pitch=74.238, yaw=180.000, distance=-1.000},   --  3. Green playmat\r\n        {position={-55.026, -2.5, 12.052},  pitch=74.238, yaw=90.000,  distance=-1.000},   --  4. White playmat\r\n        {position={-55.026, -2.5, -11.479}, pitch=74.238, yaw=90.000,  distance=-1.000},   --  5. Orange playmat\r\n        {position={-31.592, -2.5, -26.392}, pitch=74.238, yaw=0.000,   distance=-1.000},   --  6. Red playmat\r\n        {position={-2.940, -2.5, 25.160},   pitch=73.556, yaw=90.000,  distance=20.146},   --  7. Victory / SetAside\r\n        {position={-58.216, -2.5, -71.288}, pitch=76.430, yaw=90.000,  distance=20.000},   --  8. Deckbuilder\r\n        {position={46.368, -2.5, 0.328},    pitch=69.491, yaw=90.000,  distance=46.255},   --  9. Campaigns\r\n        {position={13.875, -2.5, 0.328},    pitch=69.491, yaw=90.000,  distance=37.962},   -- 10. Scenarios\r\n        {position={51.940, -2.5, 64.476},   pitch=76.430, yaw=90.000,  distance=48.102},   -- 11. Level 0\r\n        {position={51.302, -2.5, -73.514},  pitch=76.430, yaw=90.000,  distance=48.102},   -- 12. Upgraded\r\n        {position={-27.788, -2.5, 74.662},  pitch=76.430, yaw=90.000,  distance=30.616},   -- 13. Weaknesses\r\n        {position={-61.090, -2.5, 70.762},  pitch=76.430, yaw=90.000,  distance=34.188},   -- 14. Rules\r\n        {position={-18.547, -2.5, -73.514}, pitch=76.430, yaw=90.000,  distance=42.249},   -- 15. Investigators\r\n        {position={-2.144, -2.5, -26.900},  pitch=73.556, yaw=90.000,  distance=20.146},   -- 16. Log\r\n        {position={-45.000, -2.5, -0.228},  pitch=73.556, yaw=90.000,  distance=12.000}    -- 17. BlessCurse\r\n    }\r\n\r\n    fullButtonData = {\r\n        { id = \"1\", width = \"84\", height = \"38\", offsetX = \"1\", offsetY = \"-9\" },\r\n        { id = \"2\", width = \"78\", height = \"50\", offsetX = \"1\", offsetY = \"-59\" },\r\n        { id = \"3\", width = \"36\", height = \"70\", offsetX = \"-62\", offsetY = \"-70\" },\r\n        { id = \"4\", width = \"70\", height = \"40\", offsetX = \"-36\", offsetY = \"-130\" },\r\n        { id = \"5\", width = \"70\", height = \"40\", offsetX = \"39\", offsetY = \"-130\" },\r\n        { id = \"6\", width = \"36\", height = \"70\", offsetX = \"64\", offsetY = \"-70\" },\r\n        { id = \"7\",  width = \"36\", height = \"36\", offsetX = \"-63\", offsetY = \"-9\" },\r\n        { id = \"8\", width = \"64\", height = \"64\", offsetX = \"153\", offsetY = \"-128\" },\r\n        { id = \"9\", width = \"155\", height = \"70\", offsetX = \"2\", offsetY = \"120\" },\r\n        { id = \"10\", width = \"155\", height = 70, offsetX = \"2\", offsetY = \"47\" },\r\n        { id = \"11\", width = \"120\", height = \"100\", offsetX = \"-148\", offsetY = \"101\" },\r\n        { id = \"12\", width = \"120\", height = \"100\", offsetX = \"150\", offsetY = \"101\" },\r\n        { id = \"13\", width = \"120\", height = \"80\", offsetX = \"-150\", offsetY = \"-55\" },\r\n        { id = \"14\", width = \"120\", height = \"60\", offsetX = \"-150\", offsetY = \"-132\" },\r\n        { id = \"15\", width = \"110\", height = \"100\", offsetX = \"152\", offsetY = \"-42\" },\r\n        { id = \"16\", width = \"36\", height = \"36\", offsetX = \"64\", offsetY = \"-9\" },\r\n        { id = \"17\", width = \"44\", height = \"25\", offsetX = \"1\", offsetY = \"-97\" }\r\n    }\r\n\r\n    playButtonData = {\r\n        { id = \"1\", width = \"84\", height = \"38\", offsetX = \"0\", offsetY = \"59\" },\r\n        { id = \"2\", width = \"78\", height = \"50\", offsetX = \"0\", offsetY = \"9\" },\r\n        { id = \"3\", width = \"36\", height = \"70\", offsetX = \"-62\", offsetY = \"-1\" },\r\n        { id = \"4\", width = \"70\", height = \"40\", offsetX = \"-37\", offsetY = \"-61\" },\r\n        { id = \"5\", width = \"70\", height = \"40\", offsetX = \"39\", offsetY = \"-61\" },\r\n        { id = \"6\", width = \"36\", height = \"70\", offsetX = \"63\", offsetY = \"-2\" },\r\n        { id = \"7\",  width = \"36\", height = \"36\", offsetX = \"-64\", offsetY = \"59\" },\r\n        { id = \"16\", width = \"36\", height = \"36\", offsetX = \"63\", offsetY = \"59\" },\r\n        { id = \"17\", width = \"44\", height = \"25\", offsetX = \"0\", offsetY = \"-28\" }\r\n    }\r\n\r\n    playermatData = {\r\n        White = { guid = '8b081b', origin = { x=-54.42, y=0, z=20.96 }, scale = { x=36.63, y=5.10, z=14.59 }, orientation = { x=0, y=270, z=0 }, minX = -61.4, maxX = -48.6, minZ = -2.39, maxZ = 24.53, xOffset = 0.07, zOffset = 0.03 },\r\n        Orange = { guid = 'bd0ff4', origin = { x=-54.42, y=0, z=-20.96 }, scale = { x=36.63, y=5.10, z=14.59 }, orientation = { x=0, y=270, z=0 }, minX = -61.4, maxX = -48.6, minZ = -24.53, maxZ = 2.39, xOffset = 0.07, zOffset = 0.02 },\r\n        Green = { guid = '383d8b', origin = { x=-25.00, y=0, z=26.20 }, scale = { x=31.5, y=5.10, z=14.59 }, orientation = { x=0, y=0, z=0 }, minX = -44.43, maxX = -17.44, minZ = 20.17, maxZ = 32.97, xOffset = -0.07, zOffset = 0.00 },\r\n        Red = { guid = '0840d5', origin = { x=-25.00, y=0, z=-26.60 }, scale = { x=31.5, y=5.10, z=14.59 }, orientation = { x=0, y=180, z=0 }, minX = -44.43, maxX = -17.44, minZ = -32.97, maxZ = -20.17, xOffset = 0.07, zOffset = -0.06 }\r\n    }\r\n\r\n    editing = false\r\n    selectedEditButton = -1\r\n\r\n    editPos = {0, 0, 0}\r\n    editPitch = 0\r\n    editYaw = 0\r\n    editDistance = 0\r\n\r\n    if saved_data ~= \"\" then\r\n        local loaded_data = JSON.decode(saved_data)\r\n\r\n        cameraParams = loaded_data.cameras\r\n        fullVisibility = loaded_data.fullVis\r\n        playVisibility = loaded_data.playVis\r\n\r\n        resetOverlay()\r\n    else\r\n        cameraParams = {\r\n            Green = {},\r\n            White = {},\r\n            Orange = {},\r\n            Red = {}\r\n        }\r\n\r\n        for iv, v in pairs({'Green', 'White', 'Orange', 'Red'}) do\r\n            cameraParams[v] = {}\r\n\r\n            for i = 1,17 do\r\n                cameraParams[v][i] = {}\r\n\r\n                cameraParams[v][i].position = defaultCameraParams[i].position\r\n                cameraParams[v][i].pitch = defaultCameraParams[i].pitch\r\n                cameraParams[v][i].yaw = defaultCameraParams[i].yaw\r\n                cameraParams[v][i].distance = defaultCameraParams[i].distance\r\n            end\r\n        end\r\n\r\n        fullVisibility = {\r\n            Green = false,\r\n            White = false,\r\n            Orange = false,\r\n            Red = false\r\n        }\r\n\r\n        playVisibility = {\r\n            Green = false,\r\n            White = false,\r\n            Orange = false,\r\n            Red = false\r\n        }\r\n    end\r\nend\r\n\r\nfunction onSave()\r\n    return JSON.encode({\r\n        cameras = cameraParams,\r\n        fullVis = fullVisibility,\r\n        playVis = playVisibility\r\n    })\r\n\r\n--    return ''\r\nend\r\n\r\nfunction displayFull(object, color)\r\n    local playerCount = getPlayerCount()\r\n    local colors\r\n    if playerCount == 1 then\r\n        colors = { 'Green', 'White', 'Orange', 'Red' }\r\n    else\r\n        colors = { color }\r\n    end\r\n\r\n    for i, v in ipairs(colors) do\r\n        fullVisibility[v] = true\r\n        playVisibility[v] = false\r\n    end\r\n\r\n    resetOverlay()\r\nend\r\n\r\nfunction displayPlayArea(object, color)\r\n    local playerCount = getPlayerCount()\r\n    local colors\r\n    if playerCount == 1 then\r\n        colors = { 'Green', 'White', 'Orange', 'Red' }\r\n    else\r\n        colors = { color }\r\n    end\r\n\r\n    for i, v in ipairs(colors) do\r\n        fullVisibility[v] = false\r\n        playVisibility[v] = true\r\n    end\r\n\r\n    resetOverlay()\r\nend\r\n\r\nfunction resetCameras(object, color)\r\n    local playerCount = getPlayerCount()\r\n    local colors\r\n\r\n    if playerCount == 1 then\r\n        colors = { 'Green', 'White', 'Orange', 'Red' }\r\n    else\r\n        colors = { color }\r\n    end\r\n\r\n    for iv, v in ipairs(colors) do\r\n        for i = 1,17 do\r\n            cameraParams[v][i].position = defaultCameraParams[i].position\r\n            cameraParams[v][i].pitch = defaultCameraParams[i].pitch\r\n            cameraParams[v][i].yaw = defaultCameraParams[i].yaw\r\n            cameraParams[v][i].distance = defaultCameraParams[i].distance\r\n        end\r\n    end\r\nend\r\n\r\nfunction closeOverlay(object, color)\r\n    fullVisibility[color] = false\r\n    playVisibility[color] = false\r\n\r\n    resetOverlay()\r\nend\r\n\r\nfunction resetOverlay()\r\n    local guid = self.getGUID()\r\n    local color\r\n    local panel\r\n\r\n    local existingXml = UI.getXml()\r\n    local openingXml = ''\r\n\r\n    -- try to only remove our panels\r\n    for p = 1,2 do\r\n        i, j = string.find(existingXml, '\u003cPanel id=\"navPanel')\r\n\r\n        if i and i \u003e 1 and string.len(openingXml) == 0 then\r\n            openingXml = string.sub(existingXml, 1, i-1)\r\n        end\r\n\r\n        if i then\r\n            local panelXml = string.sub(existingXml, i)\r\n            k, m = string.find(panelXml, '\u003c/Panel\u003e')\r\n\r\n            existingXml = string.sub(panelXml, m+1)\r\n        else\r\n            break\r\n        end\r\n    end\r\n\r\n    local xml = openingXml .. [[\r\n    ]] .. existingXml\r\n\r\n    local fullColors = ''\r\n    local playColors = ''\r\n\r\n    for i, v in pairs(fullVisibility) do\r\n        if v == true then\r\n            if string.len(fullColors) \u003e 0 then\r\n                fullColors = fullColors .. '|' .. i\r\n            else\r\n                fullColors = i\r\n            end\r\n        end\r\n    end\r\n\r\n    for i, v in pairs(playVisibility) do\r\n        if v == true then\r\n            if string.len(playColors) \u003e 0 then\r\n                playColors = playColors .. '|' .. i\r\n            else\r\n                playColors = i\r\n            end\r\n        end\r\n    end\r\n\r\n    if string.len(fullColors) \u003e 0 then\r\n        data = fullButtonData\r\n\r\n        xml = xml .. [[\u003cPanel id=\"navPanelFull\" height=\"358\" width=\"455\" visibility=\"]] .. fullColors .. [[\" allowDragging=\"true\" returnToOriginalPositionWhenReleased=\"false\" rectAlignment=\"LowerRight\" offsetXY=\"-40 0\"\u003e\r\n            \u003cimage id=\"backgroundImage\" image=\"OverlayLarge\" /\u003e]]\r\n\r\n        for i, d in ipairs(data) do\r\n            if editing then\r\n                if selectedEditButton \u003c 0 then\r\n                    color = \"rgba(1,1,1,1)\"\r\n                elseif tonumber(d.id) == selectedEditButton then\r\n                    color = \"rgba(0,1,0,1)\"\r\n                else\r\n                    color = \"rgba(1,0,0,1)\"\r\n                end\r\n            else\r\n                color = \"rgba(0,1,0,0)\"\r\n            end\r\n\r\n            xml = xml .. [[\u003cbutton\r\n                onClick=\"]] .. guid .. [[/buttonClicked\"\r\n                id=\"]] .. d.id .. [[\"\r\n                height=\"]] .. d.height .. [[\"\r\n                width=\"]] .. d.width .. [[\"\r\n                offsetXY=\"]] .. d.offsetX .. \" \" .. d.offsetY .. [[\"\r\n                color=\"]] .. color .. [[\"\r\n            \u003e\r\n            \u003c/button\u003e\r\n            ]]\r\n        end\r\n\r\n        xml = xml .. [[    \u003c/Panel\u003e]]\r\n    end\r\n\r\n    if string.len(playColors) \u003e 0 then\r\n        data = playButtonData\r\n\r\n        xml = xml .. [[\r\n        \u003cPanel id=\"navPanelPlay\" height=\"208\" width=\"205\" visibility=\"]] .. playColors .. [[\" allowDragging=\"true\" returnToOriginalPositionWhenReleased=\"false\" rectAlignment=\"LowerRight\" offsetXY=\"-40 0\"\u003e\r\n            \u003cimage id=\"backgroundImage\" image=\"OverlaySmall\" /\u003e]]\r\n\r\n        for i, d in ipairs(data) do\r\n            if editing then\r\n                if selectedEditButton \u003c 0 then\r\n                    color = \"rgba(1,1,1,1)\"\r\n                elseif tonumber(d.id) == selectedEditButton then\r\n                    color = \"rgba(0,1,0,1)\"\r\n                else\r\n                    color = \"rgba(1,0,0,1)\"\r\n                end\r\n            else\r\n                color = \"rgba(0,1,0,0)\"\r\n            end\r\n\r\n            xml = xml .. [[\u003cbutton\r\n                onClick=\"]] .. guid .. [[/buttonClicked\"\r\n                id=\"]] .. d.id .. [[\"\r\n                height=\"]] .. d.height .. [[\"\r\n                width=\"]] .. d.width .. [[\"\r\n                offsetXY=\"]] .. d.offsetX .. \" \" .. d.offsetY .. [[\"\r\n                color=\"]] .. color .. [[\"\r\n            \u003e\r\n            \u003c/button\u003e\r\n            ]]\r\n        end\r\n\r\n        xml = xml .. [[    \u003c/Panel\u003e]]\r\n    end\r\n\r\n    local existingAssets = UI.getCustomAssets()\r\n    local largeOverlay = nil\r\n    local smallOverlay = nil\r\n\r\n    for i,v in pairs(existingAssets) do\r\n        for ii,vv in pairs(v) do\r\n            if vv == 'OverlayLarge' then\r\n                largeOverlay = v\r\n            end\r\n            if vv == 'OverlaySmall' then\r\n                smallOverlay = v\r\n            end\r\n        end\r\n    end\r\n\r\n    local largeURL = 'http://cloud-3.steamusercontent.com/ugc/1745699502804112656/A34D1F30E0DA0E283F300AE6D6B63F59FFC97730/'\r\n    local smallURL = 'http://cloud-3.steamusercontent.com/ugc/1745699502804112719/CFFC89BF9FB8439204EE19CF94180EC99450CD38/'\r\n\r\n    if largeOverlay == nil then\r\n        largeOverlay = { name='OverlayLarge', url=largeURL }\r\n        table.insert(existingAssets, largeOverlay)\r\n    else\r\n        largeOverlay.url = largeURL\r\n\r\n    end\r\n\r\n    if smallOverlay == nil then\r\n        smallOverlay = { name='OverlaySmall', url=smallURL }\r\n        table.insert(existingAssets, smallOverlay)\r\n    else\r\n        smallOverlay.url = smallURL\r\n    end\r\n\r\n    UI.setXml(xml, existingAssets)\r\nend\r\n\r\nfunction buttonClicked(player, _, idValue)\r\n    if editing then\r\n        if selectedEditButton \u003c 0 then\r\n            selectedEditButton = tonumber(idValue)\r\n        else\r\n            if tonumber(idValue) == selectedEditButton and editDistance \u003e 0 then\r\n                local playerCount = getPlayerCount()\r\n                local colors\r\n\r\n                if playerCount == 1 then\r\n                    colors = { 'Green', 'White', 'Orange', 'Red' }\r\n                else\r\n                    colors = { player.color }\r\n                end\r\n\r\n                for i, v in ipairs(colors) do\r\n                    cameraParams[v][selectedEditButton].position = editPos\r\n                    cameraParams[v][selectedEditButton].pitch = editPitch\r\n                    cameraParams[v][selectedEditButton].yaw = editYaw\r\n                    cameraParams[v][selectedEditButton].distance = editDistance\r\n                end\r\n            end\r\n\r\n            editing = false\r\n            selectedEditButton = -1\r\n        end\r\n\r\n        resetOverlay()\r\n    else\r\n        loadCamera(player, _, idValue)\r\n    end\r\nend\r\n\r\nfunction loadCamera(player, _, idValue)\r\n    local index = tonumber(idValue)\r\n    local color = player.color\r\n\r\n    -- only do map zooming if te camera hasn't been specially set by user\r\n    if index == 2 and cameraParams[color][index].distance \u003c= 0.0 then\r\n        local mapObjects = Physics.cast({\r\n            origin = { x=-29.2, y=0, z=0.0 },\r\n            direction = { x=0, y=1, z=0 },\r\n            type = 3,\r\n            size = { x=36, y=5, z=31.4 },\r\n            orientation = { x=0, y=90, z=0 }\r\n        })\r\n\r\n        local minX = 100\r\n        local maxX = -100\r\n        local minZ = 100\r\n        local maxZ = -100\r\n\r\n        for i,v in pairs(mapObjects) do\r\n            local obj = v.hit_object\r\n\r\n            if obj.type == 'Card' or obj.type == 'Infinite' then\r\n                local bounds = obj.getBounds()\r\n\r\n                local x1 = bounds['center'][1] - bounds['size'][1]/2\r\n                local x2 = bounds['center'][1] + bounds['size'][1]/2\r\n                local z1 = bounds['center'][3] - bounds['size'][3]/2\r\n                local z2 = bounds['center'][3] + bounds['size'][3]/2\r\n\r\n                if x1 \u003c minX then\r\n                    minX = x1\r\n                end\r\n                if x2 \u003e maxX then\r\n                    maxX = x2\r\n                end\r\n                if z1 \u003c minZ then\r\n                    minZ = z1\r\n                end\r\n                if z2 \u003e maxZ then\r\n                    maxZ = z2\r\n                end\r\n            end\r\n        end\r\n\r\n        if minX \u003c 100 then\r\n            local dx = maxX - minX\r\n            local dz = (maxZ - minZ) / (1.6)  -- screen ratio * 1.2 (for my macbook pro, no idea how to generalize this)\r\n            local centerX = (minX + maxX) / 2 - dx*0.12   -- offset is to move it a bit up, so the cards don't block anything\r\n            local centerZ = (minZ + maxZ) / 2\r\n\r\n            local scale = dx\r\n            if dz \u003e dx then\r\n                scale = dz\r\n            end\r\n\r\n            -- regression line from the following data points, seems linear\r\n            -- rows 1 scale 4.5   d 12\r\n            -- rows 2 scale 11    d 16\r\n            -- rows 3 scale 14.5  d 19.6\r\n            -- rows 4 scale 19.6  d 25\r\n            -- rows 5 scale 23.25 d 28\r\n            -- rows 6 scale 30.8  d 34\r\n\r\n            -- local d = 0.8685 * scale + 7.4505\r\n\r\n            -- modified by testing\r\n    --        local d = 0.8685 * scale + 5\r\n            local d = 1.04 * scale + 5\r\n\r\n            player.lookAt({position={centerX, 0, centerZ}, pitch=75.823, yaw=90.000,  distance=d})\r\n        else\r\n            player.lookAt({position={-33.667, 0, 0.014}, pitch=75.823, yaw=90.000,  distance=36})\r\n        end\r\n    elseif index \u003e= 3 and index \u003c= 6 then\r\n        local matColor = nil\r\n\r\n        if index == 3 then\r\n            matColor = 'Green'\r\n        elseif index == 4 then\r\n            matColor = 'White'\r\n        elseif index == 5 then\r\n            matColor = 'Orange'\r\n        elseif index == 6 then\r\n            matColor = 'Red'\r\n        end\r\n\r\n        if matColor ~= nil then\r\n            local playerCount = getPlayerCount()\r\n\r\n            if playerCount \u003c= 1 then\r\n                player.changeColor(matColor)\r\n            end\r\n        end\r\n\r\n        if cameraParams[color][index].distance \u003c= 0.0 then\r\n            local matObjects = Physics.cast({\r\n                origin = playermatData[matColor].origin,\r\n                direction = { x=0, y=1, z=0 },\r\n                type = 3,\r\n                size = playermatData[matColor].scale,\r\n                orientation = playermatData[matColor].orientation,\r\n--                debug=true\r\n            })\r\n\r\n            local minX = playermatData[matColor].minX\r\n            local maxX = playermatData[matColor].maxX\r\n            local minZ = playermatData[matColor].minZ\r\n            local maxZ = playermatData[matColor].maxZ\r\n\r\n            for i,v in pairs(matObjects) do\r\n                local obj = v.hit_object\r\n\r\n                if obj.type == 'Card' or obj.type == 'Infinite' then\r\n                    local bounds = obj.getBounds()\r\n\r\n                    local x1 = bounds['center'][1] - bounds['size'][1]/2\r\n                    local x2 = bounds['center'][1] + bounds['size'][1]/2\r\n                    local z1 = bounds['center'][3] - bounds['size'][3]/2\r\n                    local z2 = bounds['center'][3] + bounds['size'][3]/2\r\n\r\n                    if x1 \u003c minX then\r\n                        minX = x1\r\n                    end\r\n                    if x2 \u003e maxX then\r\n                        maxX = x2\r\n                    end\r\n                    if z1 \u003c minZ then\r\n                        minZ = z1\r\n                    end\r\n                    if z2 \u003e maxZ then\r\n                        maxZ = z2\r\n                    end\r\n                end\r\n            end\r\n\r\n            local dx\r\n            local dz\r\n            local centerX\r\n            local centerZ\r\n            local scale\r\n            local yaw\r\n            local d\r\n\r\n            -- White/Orange\r\n            if index \u003e 3 and index \u003c 6 then\r\n                dx = maxX - minX\r\n                dz = (maxZ - minZ) / (1.6)  -- screen ratio * 1.2 (for my macbook pro, no idea how to generalize this)\r\n\r\n                centerX = (minX + maxX) / 2 - dx*playermatData[matColor].xOffset   -- offset is to move it a bit up, so the cards don't block anything\r\n                centerZ = (minZ + maxZ) / 2 + dz*playermatData[matColor].zOffset   -- offset is to move it right a bit, so the toolbar doesn't block anything\r\n                yaw = 90\r\n\r\n                scale = dx\r\n                if dz \u003e dx then\r\n                    scale = dz\r\n                end\r\n\r\n                d = 0.64 * scale + 7\r\n            else    -- Green/Red\r\n                dx = (maxX - minX) / (1.6)  -- screen ratio * 1.2 (for my macbook pro, no idea how to generalize this)\r\n                dz = maxZ - minZ\r\n\r\n                centerX = (minX + maxX) / 2 + dx*playermatData[matColor].zOffset   -- offset is to move it right a bit, so the toolbar doesn't block anything\r\n                centerZ = (minZ + maxZ) / 2 - dz*playermatData[matColor].xOffset   -- offset is to move it a bit up, so the cards don't block anything\r\n                yaw = playermatData[matColor].orientation.y + 180\r\n\r\n                scale = dz\r\n                if dx \u003e dz then\r\n                    scale = dx\r\n                end\r\n\r\n                d = 0.64 * scale + 7\r\n            end\r\n\r\n            -- 15.46 -\u003e 17.081\r\n            -- 18.88 -\u003e 19.33\r\n            -- 24.34 -\u003e 22.6\r\n\r\n            -- need to wait if the player color changed\r\n            Wait.frames(function() player.lookAt({position={centerX, 0, centerZ}, pitch=75.823, yaw=yaw,  distance=d}) end, 2)\r\n        else\r\n            Wait.frames(function() player.lookAt(cameraParams[color][index]) end, 2)\r\n        end\r\n    else\r\n        player.lookAt(cameraParams[color][index])\r\n    end\r\nend\r\n\r\nfunction beginSetCamera(object, color)\r\n    editing = true\r\n\r\n    resetOverlay()\r\nend\r\n\r\nfunction updateEditCamera(params)\r\n    editPos = params[1]\r\n    editPitch = params[2]\r\n    editYaw = params[3]\r\n    editDistance = params[4]\r\nend\r\n\r\nfunction getPlayerCount()\r\n    local playerCount = 0\r\n\r\n    local playerList = getSeatedPlayers()\r\n\r\n    for i, v in ipairs(playerList) do\r\n        if v == 'Green' or v == 'White' or v == 'Orange' or v == 'Red' then\r\n            playerCount = playerCount + 1\r\n        end\r\n    end\r\n\r\n    return playerCount\r\nend\r\n",
  "LuaScriptState_path": "jaqenZannsNavigationOverlayTile.0ffbc5.txt",
  "LuaScript_path": "jaqenZannsNavigationOverlayTile.0ffbc5.ttslua",
  "MeasureMovement": false,
  "Name": "Custom_Tile",
  "Nickname": "jaqenZann's Navigation Overlay Tile",
  "Snap": false,
  "Sticky": true,
  "Tooltip": true,
  "Transform": {
    "posX": 25.9615211,
    "posY": 3.51928949,
    "posZ": -18.6240387,
    "rotX": 1.10871756,
    "rotY": 269.998779,
    "rotZ": 359.8623,
    "scaleX": 0.8023953,
    "scaleY": 1,
    "scaleZ": 0.8023953
  },
  "Value": 0,
  "XmlUI": ""
}