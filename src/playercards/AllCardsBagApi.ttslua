do
  local AllCardsBagApi = {}
  local guidReferenceApi = require("core/GUIDReferenceApi")

  local function getAllCardsBag()
    return guidReferenceApi.getObjectByOwnerAndType("Mythos", "AllCardsBag")
  end

  -- internal function to create a copy of the table to avoid operating on variables owned by different objects
  local function deepCopy(data)
    if type(data) ~= "table" then return data end
    local copiedList = {}
    for key, value in pairs(data) do
      if type(value) == "table" then
        copiedList[key] = deepCopy(value)
      else
        copiedList[key] = value
      end
    end
    return copiedList
  end

  -- Returns a specific card from the bag, based on ArkhamDB ID
  ---@param id string ID of the card to retrieve
  ---@return table: If the indexes are still being constructed, returns an empty table.
  --  Otherwise, a single table with the following fields
  --    data: TTS object data, suitable for spawning the card
  --    metadata: Table of parsed metadata
  AllCardsBagApi.getCardById = function(id)
    return getAllCardsBag().call("getCardById", { id = id })
  end

  -- Gets a random basic weakness from the bag. Once a given ID has been returned it
  -- will be removed from the list and cannot be selected again until a reload occurs
  -- or the indexes are rebuilt, which will refresh the list to include all weaknesses.
  ---@param count number Number of weaknesses
  ---@param restrictions table Additional restrictions:
  ---  class string Class to restrict weakness to
  ---  standalone boolean Whether 'Campaign only' weaknesses should be exluded
  ---  traits? string Trait(s) to use as filter
  ---@return table: Table with IDs of the selected weaknesses
  AllCardsBagApi.getRandomWeaknessIds = function(count, restrictions)
    return deepCopy(getAllCardsBag().call("getRandomWeaknessIds", {count = count, restrictions = restrictions}))
  end

  AllCardsBagApi.isIndexReady = function()
    return getAllCardsBag().call("isIndexReady")
  end

  -- Called by Hotfix bags when they load. If we are still loading indexes, then
  -- the all cards and hotfix bags are being loaded together, and we can ignore
  -- this call as the hotfix will be included in the initial indexing. If it is
  -- called once indexing is complete it means the hotfix bag has been added
  -- later, and we should rebuild the index to integrate the hotfix bag.
  AllCardsBagApi.rebuildIndexForHotfix = function()
    getAllCardsBag().call("rebuildIndexForHotfix")
  end

  -- Searches the bag for cards which match the given name and returns a list.
  -- Note that this is an O(n) search without index support. It may be slow.
  ---@param name string or string fragment to search for names
  ---@param exact boolean Whether the name match should be exact
  AllCardsBagApi.getCardsByName = function(name, exact)
    return deepCopy(getAllCardsBag().call("getCardsByName", { name = name, exact = exact }))
  end

  -- Searches the bag for cards which match the given filters.
  ---@param filters table Contains the filters
  ---@param exact boolean Whether the name match should be exact
  AllCardsBagApi.getCardsByFilter = function(filters, exact)
    return deepCopy(getAllCardsBag().call("getCardsByFilter", { filters = filters, exact = exact }))
  end

  AllCardsBagApi.isBagPresent = function()
    return getAllCardsBag() and true
  end

  -- Returns a list of cards from the bag matching a class and level (0 or upgraded)
  ---@param class string class to retrieve ("Guardian", "Seeker", etc)
  ---@param upgraded boolean True for upgraded cards (Level 1-5), false for Level 0
  ---@return table: If the indexes are still being constructed, returns an empty table.
  --  Otherwise, a list of tables, each with the following fields
  --    data: TTS object data, suitable for spawning the card
  --    metadata: Table of parsed metadata
  AllCardsBagApi.getCardsByClassAndLevel = function(class, upgraded)
    return deepCopy(getAllCardsBag().call("getCardsByClassAndLevel", { class = class, upgraded = upgraded }))
  end

  -- Returns a list of cards from the bag matching a cycle
  ---@param cycle string Cycle to retrieve ("The Scarlet Keys" etc.)
  ---@param sortByMetadata boolean If true, sorts the table by metadata instead of ID
  ---@param includeNoLevelCards boolean If true, includes cards without level
  ---@return table: If the indexes are still being constructed, returns an empty table.
  --  Otherwise, a list of tables, each with the following fields
  --    data: TTS object data, suitable for spawning the card
  --    metadata: Table of parsed metadata
  AllCardsBagApi.getCardsByCycle = function(cycle, sortByMetadata, includeNoLevelCards)
    return deepCopy(getAllCardsBag().call("getCardsByCycle", {
      cycle = cycle,
      sortByMetadata = sortByMetadata,
      includeNoLevelCards = includeNoLevelCards
    }))
  end

  -- Returns the data for custom investigators for the PlayerCardPanel
  AllCardsBagApi.getCustomInvestigatorData = function()
    return deepCopy(getAllCardsBag().call("getCustomInvestigatorData"))
  end

  -- Constructs a list of available basic weaknesses by starting with the full pool of basic
  -- weaknesses then removing any which are currently in the play or deck construction areas
  ---@param restrictions table Additional restrictions:
  ---  class string Class to restrict weakness to
  ---  standalone boolean Whether 'Campaign only' weaknesses should be exluded
  ---  traits? string Trait(s) to use as filter
  ---@return table: Array of weakness IDs which are valid to choose from
  AllCardsBagApi.buildAvailableWeaknesses = function(restrictions)
    return deepCopy(getAllCardsBag().call("buildAvailableWeaknesses", restrictions))
  end

  AllCardsBagApi.getUniqueWeaknesses = function()
    return deepCopy(getAllCardsBag().call("getUniqueWeaknesses"))
  end

  return AllCardsBagApi
end
