require("playercards/PlayerCardSpawner")

local allCardsBagApi           = require("playercards/AllCardsBagApi")

local BUTTON_LABELS            = {}
BUTTON_LABELS["spawn"]         = {}
BUTTON_LABELS["spawn"][true]   = "All matching cards"
BUTTON_LABELS["spawn"][false]  = "First matching card"
BUTTON_LABELS["search"]        = {}
BUTTON_LABELS["search"][true]  = "Name equals search term"
BUTTON_LABELS["search"][false] = "Name contains search term"

local inputParameters          = {}
inputParameters.label          = "Enter name / ID"
inputParameters.input_function = "input_func"
inputParameters.function_owner = self
inputParameters.alignment      = 2
inputParameters.position       = { x = 0, y = 0.1, z = -0.6 }
inputParameters.width          = 3500
inputParameters.height         = 450
inputParameters.font_size      = 400
inputParameters.scale          = { 0.12, 1, 0.12 }
inputParameters.color          = { 0.9, 0.7, 0.5 }
inputParameters.font_color     = { 0, 0, 0 }

function updateSave()
  self.script_state = JSON.encode({ spawnAll, searchExact, inputParameters.value })
end

function onLoad(savedData)
  local loadedData      = JSON.decode(savedData)
  spawnAll              = loadedData[1] or false
  searchExact           = loadedData[2] or false
  inputParameters.value = loadedData[3] or ""
  self.createInput(inputParameters)

  -- shared parameters
  local buttonParameters          = {}
  buttonParameters.function_owner = self
  buttonParameters.font_size      = 180
  buttonParameters.scale          = { 0.1, 1, 0.1 }
  buttonParameters.hover_color    = { 0.4, 0.6, 0.8 }
  buttonParameters.color          = { 0.9, 0.7, 0.5 }

  -- index 0: button for spawn mode
  buttonParameters.click_function = "toggleSpawnMode"
  buttonParameters.label          = BUTTON_LABELS["spawn"][spawnAll]
  buttonParameters.position       = { x = 0.16, y = 0.1, z = 0.565 }
  buttonParameters.height         = 375
  buttonParameters.width          = 2300
  self.createButton(buttonParameters)

  -- index 1: button for search mode
  buttonParameters.click_function = "toggleSearchMode"
  buttonParameters.label          = BUTTON_LABELS["search"][searchExact]
  buttonParameters.position       = { x = 0.16, y = 0.1, z = 0.652 }
  self.createButton(buttonParameters)

  -- index 2: start search
  buttonParameters.click_function = "startSearch"
  buttonParameters.label          = ""
  buttonParameters.position       = { x = 0, y = 0, z = 0.806 }
  buttonParameters.height         = 600
  buttonParameters.width          = 2800
  self.createButton(buttonParameters)
end

function toggleSpawnMode()
  spawnAll = not spawnAll
  self.editButton({ index = 0, label = BUTTON_LABELS["spawn"][spawnAll] })
  updateSave()
end

function toggleSearchMode()
  searchExact = not searchExact
  self.editButton({ index = 1, label = BUTTON_LABELS["search"][searchExact] })
  updateSave()
end

-- if "Enter press" (\n) is found, start search and recreate input
function input_func(_, _, input, stillEditing)
  if not stillEditing then
    inputParameters.value = input
  elseif string.find(input, "%\n") ~= nil then
    sanitizeInput(input)
    startSearch()
  end
end

-- remove linebreaks, leading & trailing whitespace and recreate the input
function sanitizeInput(input)
  input = input:gsub("%\n", "")
  inputParameters.value = input:match("^%s*(.-)%s*$")
  self.clearInputs()
  self.createInput(inputParameters)
  updateSave()
end

function startSearch()
  if inputParameters.value == nil or string.len(inputParameters.value) == 0 then
    printToAll("Please enter a search string.", "Yellow")
    return
  end

  if string.len(inputParameters.value) < 3 then
    printToAll("Please enter a longer search string.", "Yellow")
    return
  end

  if not allCardsBagApi.isBagPresent() then
    printToAll("Player card bag couldn't be found.", "Red")
    return
  end

  -- if the search string doesn't contain whitespace, attempt to treat it as ID
  if not string.find(inputParameters.value, "%s") then
    local singleCard = allCardsBagApi.getCardById(inputParameters.value)
    if singleCard ~= nil then
      spawnCardList({ singleCard })
      return
    end
  else
    -- this is called here since the search could be started from the button
    sanitizeInput(inputParameters.value)
  end

  -- parse search filters
  local parsedFilters = parseSearchString(inputParameters.value)

  -- search all objects in bag
  local cardList = allCardsBagApi.getCardsByFilter(parsedFilters, searchExact)
  if cardList == nil or #cardList == 0 then
    printToAll("No match found.", "Red")
    return
  end

  if (#cardList > 100) then
    printToAll("Matched more than 100 cards, please try a more specific search.", "Yellow")
    return
  end

  -- sort table by name (reverse for multiple results, because bottom card spawns first)
  table.sort(cardList, function(k1, k2) return spawnAll == (k1.data.Nickname > k2.data.Nickname) end)

  spawnCardList(cardList)
end

function spawnCardList(cardList)
  local rot = self.getRotation()
  local pos = self.positionToWorld(Vector(0, 2, -0.08))
  Spawner.spawnCards(cardList, pos, rot, true)
end

function parseSearchString(input)
  local filters = {}
  local searchTerm = {}
  local i = 1
  local length = #input

  local function skipWhitespace()
    while i <= length and input:sub(i, i):match("%s") do
      i = i + 1
    end
  end

  local function parseQuotedValue()
    local start = i
    i = i + 1 -- Skip the opening quote
    while i <= length and input:sub(i, i) ~= '"' do
      i = i + 1
    end
    if i > length then
      printToAll("Unclosed quoted value")
    end
    local value = input:sub(start + 1, i - 1)
    i = i + 1 -- Skip the closing quote
    return value
  end

  local function parseUnquotedValue()
    local start = i
    while i <= length and not input:sub(i, i):match("[%s\"<>:!]") do
      i = i + 1
    end
    return input:sub(start, i - 1)
  end

  local function parseFilter()
    local key = input:sub(i, i)
    i = i + 1
    local operator = input:sub(i, i)
    if not operator:match("[:<>!]") then
      printToAll("Invalid operator: " .. operator)
    end
    i = i + 1
    skipWhitespace()
    local value
    if input:sub(i, i) == '"' then
      value = parseQuotedValue()
    else
      value = parseUnquotedValue()
    end
    filters[key] = { operator = operator, value = value }
  end

  skipWhitespace()
  while i <= length do
    local char = input:sub(i, i)
    if char:match("%a") then
      if i + 1 <= length and input:sub(i + 1, i + 1):match("[:<>!]") then
        parseFilter()
      else
        -- Treat as part of the main search term
        table.insert(searchTerm, char)
        i = i + 1
      end
    else
      table.insert(searchTerm, char)
      i = i + 1
    end
  end

  -- Combine the search term parts into a single string
  local term = table.concat(searchTerm)
  if term ~= "" then
    filters.search = term:match("^%s*(.-)%s*$")
  end

  return filters
end
