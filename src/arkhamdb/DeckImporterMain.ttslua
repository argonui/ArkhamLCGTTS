require("arkhamdb/DeckImporterUi")
require("playercards/PlayerCardSpawner")

local playmatApi = require("playermat/PlaymatApi")
local playAreaApi = require("core/PlayAreaApi")
local allCardsBagApi = require("playercards/AllCardsBagApi")
local arkhamDb = require("arkhamdb/ArkhamDb")
local zones = require("playermat/Zones")

function onLoad(script_state)
  initializeUi(JSON.decode(script_state))
  math.randomseed(os.time())
  arkhamDb.initialize()
end

function onSave() return JSON.encode(getUiState()) end

-- Returns the zone name where the specified card should be placed, based on its metadata.
---@param cardMetadata Table of card metadata.
---@return Zone String Name of the zone such as "Deck", "SetAside1", etc.
--     See Zones object documentation for a list of valid zones.
function getDefaultCardZone(cardMetadata, bondedList)
  if (cardMetadata.id == "09080-m") then -- Have to check the Servitor before other minicards
    return "SetAside6"
  elseif (cardMetadata.id == "09006") then -- On The Mend is set aside
    return "SetAside2"
  elseif cardMetadata.type == "Investigator" then
    return "Investigator"
  elseif cardMetadata.type == "Minicard" then
    return "Minicard"
  elseif cardMetadata.type == "UpgradeSheet" then
    return "SetAside4"
  elseif cardMetadata.startsInPlay then
    return "BlankTop"
  elseif cardMetadata.permanent then
    return "SetAside1"
  elseif bondedList[cardMetadata.id] then
    return "SetAside2"
    -- SetAside3 is used for Ancestral Knowledge / Underworld Market
  else
    return "Deck"
  end
end

function buildDeck(playerColor, deckId)
  local uiState = getUiState()
  arkhamDb.getDecklist(
      playerColor,
      deckId,
      uiState.private,
      uiState.loadNewest,
      uiState.investigators,
      loadCards)
end

-- Process the slot list, which defines the card Ids and counts of cards to load. Spawn those cards
-- at the appropriate zones and report an error to the user if any could not be loaded.
-- This is a callback function which handles the results of ArkhamDb.getDecklist()
-- This method uses an encapsulated coroutine with yields to make the card spawning cleaner.
--
---@param slots Table Key-Value table of cardId:count. cardId is the ArkhamDB ID of the card to spawn,
--     and count is the number which should be spawned
---@param investigatorId String ArkhamDB ID (code) for this deck's investigator.
--     Investigator cards should already be added to the slots list if they
--     should be spawned, but this value is separate to check for special
--     handling for certain investigators
---@param bondedList Table A table of cardID keys to meaningless values.  Card IDs in this list were added
--     from a parent bonded card.
---@param customizations String ArkhamDB data for customizations on customizable cards
---@param playerColor String Color name of the player mat to place this deck on (e.g. "Red")
---@param loadAltInvestigator String Contains the name of alternative art for the investigator ("normal", "revised" or "promo")
function loadCards(slots, investigatorId, bondedList, customizations, playerColor, loadAltInvestigator)
  function coinside()
    local yPos = {}
    local cardsToSpawn = {}
    for cardId, cardCount in pairs(slots) do
      local card = allCardsBagApi.getCardById(cardId)
      if card ~= nil then
        local cardZone = getDefaultCardZone(card.metadata, bondedList)
        for i = 1, cardCount do
          table.insert(cardsToSpawn, { data = card.data, metadata = card.metadata, zone = cardZone })
        end

        slots[cardId] = 0
      end
    end

    handleAncestralKnowledge(cardsToSpawn)
    handleUnderworldMarket(cardsToSpawn, playerColor)
    handleHunchDeck(investigatorId, cardsToSpawn, playerColor)
    handleCustomizableUpgrades(cardsToSpawn, customizations)
    handlePeteSignatureAssets(investigatorId, cardsToSpawn)

    -- Split the card list into separate lists for each zone
    local zoneDecks = buildZoneLists(cardsToSpawn)
    -- Spawn the list for each zone
    for zone, zoneCards in pairs(zoneDecks) do
      local deckPos = zones.getZonePosition(playerColor, zone)
      deckPos.y = 3

      local callback = nil
      -- If cards are spread too close together TTS groups them weirdly, selecting multiples
      -- when hovering over a single card.  This distance is the minimum to avoid that
      local spreadDistance = 1.15
      if (zone == "SetAside4") then
        -- SetAside4 is reserved for customization cards, and we want them spread on the table
        -- so their checkboxes are visible
        -- TO-DO: take into account that spreading will make multiple rows
        -- (this is affected by the user's local settings!)
        if (playerColor == "White") then
          deckPos.z = deckPos.z + (#zoneCards - 1) * spreadDistance
        elseif (playerColor == "Green") then
          deckPos.x = deckPos.x + (#zoneCards - 1) * spreadDistance
        end
        callback = function(deck) deck.spread(spreadDistance) end
      elseif zone == "Deck" then
        callback = function(deck) deckSpawned(deck, playerColor) end
      elseif zone == "Investigator" or zone == "Minicard" then
        callback = function(card) loadAltArt(card, loadAltInvestigator) end
      end
      Spawner.spawnCards(
          zoneCards,
          deckPos,
          zones.getDefaultCardRotation(playerColor, zone),
          true, -- Sort deck
          callback)

      coroutine.yield(0)
    end

    -- Look for any cards which haven't been loaded
    local hadError = false
    for cardId, remainingCount in pairs(slots) do
      if remainingCount > 0 then
        hadError = true
        arkhamDb.logCardNotFound(cardId, playerColor)
      end
    end
    if (not hadError) then
      printToAll("Deck loaded successfully!", playerColor)
    end
    return 1
  end

  startLuaCoroutine(self, "coinside")
end

-- Callback handler for the main deck spawning.  Looks for cards which should start in hand, and
-- draws them for the appropriate player.
---@param deck Object Callback-provided spawned deck object
---@param playerColor String Color of the player to draw the cards to
function deckSpawned(deck, playerColor)
  local player = Player[playmatApi.getPlayerColor(playerColor)]
  local handPos = player.getHandTransform(1).position -- Only one hand zone per player
  local deckCards = deck.getData().ContainedObjects
  -- Process in reverse order so taking cards out doesn't upset the indexing
  for i = #deckCards, 1, -1 do
    local cardMetadata = JSON.decode(deckCards[i].GMNotes) or { }
    if cardMetadata.startsInHand then
      deck.takeObject({ index = i - 1, position = handPos, flip = true, smooth = true})
    end
  end
end

-- Converts the Raven Quill's selections from card IDs to card names.  This could be more elegant
-- but the inputs are very static so we're using some brute force.
---@param selectionString String provided by ArkhamDB, indicates the customization selections
--     Should be either a single card ID or two separated by a ^ (e.g. XXXXX^YYYYY)
function convertRavenQuillSelections(selectionString)
  if (string.len(selectionString) == 5) then
    return getCardName(selectionString)
  elseif (string.len(selectionString) == 11) then
    return getCardName(string.sub(selectionString, 1, 5)) .. ", " .. getCardName(string.sub(selectionString, 7))
  end
end

-- Converts Grizzled's selections from a single string with "^".
---@param selectionString String provided by ArkhamDB, indicates the customization selections
--     Should be two Traits separated by a ^ (e.g. XXXXX^YYYYY)
function convertGrizzledSelections(selectionString)
  return selectionString:gsub("%^", ", ")
end

-- Returns the simple name of a card given its ID.  This will find the card and strip any trailing
-- SCED-specific suffixes such as (Taboo) or (Level)
function getCardName(cardId)
  local card = allCardsBagApi.getCardById(cardId)
  if (card ~= nil) then
    local name = card.data.Nickname
    if (string.find(name, " %(")) then
      return string.sub(name, 1, string.find(name, " %(") - 1)
    else
      return name
    end
  end
end

-- Split a single list of cards into a separate table of lists, keyed by the zone
---@param cards: Table of {cardData, cardMetadata, zone}
---@return: Table of {zoneName=card list}
function buildZoneLists(cards)
  local zoneList = {}
  for _, card in ipairs(cards) do
    if zoneList[card.zone] == nil then
      zoneList[card.zone] = {}
    end
    table.insert(zoneList[card.zone], card)
  end

  return zoneList
end

-- Check to see if the deck list has Ancestral Knowledge. If it does, move 5 random skills to SetAside3
---@param cardList Table Deck list being created
function handleAncestralKnowledge(cardList)
  local hasAncestralKnowledge = false
  local skillList = {}
  -- Have to process the entire list to check for Ancestral Knowledge and get all possible skills, so do both in one pass
  for i, card in ipairs(cardList) do
    if card.metadata.id == "07303" then
      hasAncestralKnowledge = true
      card.zone = "SetAside3"
    elseif (card.metadata.type == "Skill"
        and card.zone == "Deck"
        and not card.metadata.weakness) then
      table.insert(skillList, i)
    end
  end
  if hasAncestralKnowledge then
    for i = 1, 5 do
      -- Move 5 random skills to SetAside3
      local skillListIndex = math.random(#skillList)
      cardList[skillList[skillListIndex]].zone = "UnderSetAside3"
      table.remove(skillList, skillListIndex)
    end
  end
end

-- Check for and handle Underworld Market by moving all Illicit cards to UnderSetAside3
---@param cardList Table Deck list being created
---@param playerColor String Color this deck is being loaded for
function handleUnderworldMarket(cardList, playerColor)
  local hasMarket = false
  local illicitList = {}
  -- Process the entire list to check for Underworld Market and get all possible skills, doing both in one pass
  for i, card in ipairs(cardList) do
    if card.metadata.id == "09077" then
      -- Underworld Market found
      hasMarket = true
      card.zone = "SetAside3"
    elseif card.metadata.traits ~= nil and string.find(card.metadata.traits, "Illicit", 1, true) and card.zone == "Deck" then
      table.insert(illicitList, i)
    end
  end

  if hasMarket then
    if #illicitList < 10 then
      printToAll("Only " .. #illicitList ..
          " Illicit cards in your deck, you can't trigger Underworld Market's ability.",
          playerColor)
    else
      -- Process cards to move them to the market deck. This is done in reverse
      -- order because the sorting needs to be reversed (deck sorts for face down)
      -- Performance here may be an issue, as table.remove() is an O(n) operation
      -- which makes the full shift O(n^2). But keep it simple unless it becomes
      -- a problem
      for i = #illicitList, 1, -1 do
        local moving = cardList[illicitList[i]]
        moving.zone = "UnderSetAside3"
        table.remove(cardList, illicitList[i])
        table.insert(cardList, moving)
      end

      if #illicitList > 10 then
        printToAll("Moved all " .. #illicitList ..
            " Illicit cards to the Market deck, reduce it to 10",
            playerColor)
      else
        printToAll("Built the Market deck", playerColor)
      end
    end
  end
end

-- If the investigator is Joe Diamond, extract all Insight events to SetAside5 to build the Hunch
--     Deck.
---@param investigatorId String ID for the deck's investigator card. Passed separately because the
---    investigator may not be included in the cardList
---@param cardList Table Deck list being created
---@param playerColor String Color this deck is being loaded for
function handleHunchDeck(investigatorId, cardList, playerColor)
  if investigatorId == "05002" then -- Joe Diamond
    local insightList = {}
    for i, card in ipairs(cardList) do
      if (card.metadata.type == "Event"
          and card.metadata.traits ~= nil
          and string.match(card.metadata.traits, "Insight")
          and card.metadata.bonded_to == nil) then
        table.insert(insightList, i)
      end
    end
    -- Process insights to move them to the hunch deck. This is done in reverse
    -- order because the sorting needs to be reversed (deck sorts for face down)
    -- Performance here may be an issue, as table.remove() is an O(n) operation
    -- which makes the full shift O(n^2). But keep it simple unless it becomes
    -- a problem
    for i = #insightList, 1, -1 do
      local moving = cardList[insightList[i]]
      moving.zone = "SetAside5"
      table.remove(cardList, insightList[i])
      table.insert(cardList, moving)
    end
    if #insightList < 11 then
      printToAll("Joe's hunch deck must have 11 cards but the deck only has " .. #insightList ..
          " Insight events.", playerColor)
    elseif #insightList > 11 then
      printToAll("Moved all " .. #insightList ..
          " Insight events to the hunch deck, reduce it to 11.", playerColor)
    else
      printToAll("Built Joe's hunch deck", playerColor)
    end
  end
end

-- For any customization upgrade cards in the card list, process the metadata from the deck to
-- set the save state to show the correct checkboxes/text field values
---@param cardList Table Deck list being created
---@param customizations Table Deck's meta table, extracted from ArkhamDB's deck structure
function handleCustomizableUpgrades(cardList, customizations)
  for _, card in ipairs(cardList) do
    if card.metadata.type == "UpgradeSheet" then
      local baseId = string.sub(card.metadata.id, 1, 5)
      local upgrades = customizations["cus_" .. baseId]

      if upgrades ~= nil then
        -- initialize tables
        -- markedBoxes: contains the amount of markedBoxes (left to right) per row (starting at row 1)
        -- inputValues: contains the amount of inputValues per row (starting at row 0)
        local selectedUpgrades = { }
        local index_xp    = {}

        -- get the index and xp values (looks like this: X|X,X|X, ..)
        -- input string from ArkhamDB is split by ","
        for str in string.gmatch(customizations["cus_" .. baseId], "([^,]+)") do
          table.insert(index_xp, str)
        end

        -- split each pair and assign it to the proper position in markedBoxes
        for _, entry in ipairs(index_xp) do
          -- counter increments from 1 to 3 and indicates the part of the string we are on
          -- usually: 1 = row, 2 = amount of check boxes, 3 = entry in inputfield
          local counter = 0
          local row     = 0

          -- parsing the string for each row
          for str in entry:gmatch("([^|]+)") do
            counter = counter + 1

            if counter == 1 then
              row = tonumber(str) + 1
            elseif counter == 2 then
              if selectedUpgrades[row] == nil then
                selectedUpgrades[row] = { }
              end
              selectedUpgrades[row].xp = tonumber(str)
            elseif counter == 3 and str ~= "" then
              if baseId == "09042" then
                selectedUpgrades[row].text = convertRavenQuillSelections(str)
              elseif baseId == "09101" then
                selectedUpgrades[row].text = convertGrizzledSelections(str)
              elseif baseId == "09079" then -- Living Ink skill selection
                -- All skills, regardless of row, are placed in upgrade slot 1 as a comma-delimited
                -- list
                if selectedUpgrades[1].text == nil then
                  selectedUpgrades[1].text = str
                else
                  selectedUpgrades[1].text = selectedUpgrades[1].text .. "," .. str
                end
              else
                selectedUpgrades[row].text = str
              end
            end
          end
        end

        -- write the loaded values to the save_data of the sheets
        card.data["LuaScriptState"] = JSON.encode({ selections = selectedUpgrades })
      end
    end
  end
end

-- Handles cards that start in play under specific conditions for Ashcan Pete (Regular Pete - Duke, Parallel Pete - Guitar)
---@param investigatorId String ID for the deck's investigator card. Passed separately because the
---    investigator may not be included in the cardList
---@param cardList Table Deck list being created
function handlePeteSignatureAssets(investigatorId, cardList)
  log(investigatorId)
  if investigatorId == "02005" or investigatorId == "02005-pb" then -- regular Pete's front
    for i, card in ipairs(cardList) do
      if card.metadata.id == "02014" then -- Duke
        card.zone = "BlankTop"
      end
    end
  elseif investigatorId == "02005-p" or investigatorId == "02005-pf" then -- parallel Pete's front
    for i, card in ipairs(cardList) do
      if card.metadata.id == "90047" then -- Pete's Guitar
        card.zone = "BlankTop"
      end
    end
  end
end

-- Callback function for investigator cards and minicards to set the correct state for alt art
---@param card Object Card which needs to be set the state for
---@param loadAltInvestigator String Contains the name of alternative art for the investigator ("normal", "revised" or "promo")
function loadAltArt(card, loadAltInvestigator)
  -- states are set up this way:
  -- 1 - normal, 2 - revised/promo, 3 - promo (if 2 is revised)
  -- This means we can always load the 2nd state for revised and just get the last state for promo
  if loadAltInvestigator == "normal" then
    return
  elseif loadAltInvestigator == "revised" then
    card.setState(2)
  elseif loadAltInvestigator == "promo" then
    local states = card.getStates()
    card.setState(#states)
  end
end
